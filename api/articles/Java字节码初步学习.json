{"title":"Java字节码初步学习","uid":"d401c16d5adfa98368631db68a02ca33","slug":"Java字节码初步学习","date":"2024-06-10T05:00:00.000Z","updated":"2024-06-28T02:49:15.055Z","comments":true,"path":"api/articles/Java字节码初步学习.json","keywords":null,"cover":"https://bu.dusays.com/2024/03/11/65ee760bd1078.jpg","content":"<h1 id=\"背景引入\"><a href=\"#背景引入\" class=\"headerlink\" title=\"背景引入\"></a>背景引入</h1><p>我们平常所写的 Java 是不能被 JVM 识别所运行的，必须将其编译成 class 文件，JVM 才能够识别代码，进行对应的程序操作。<br>Java 有着”一次编译，到处运行”的特点，也就是说当我们对一份 java 代码进行编译之后，得到的 class 文件能够放在任意机器或者任意 OS 系统中的 JVM 中识别并运行。当然 JVM 并不止单单支持 Java。</p>\n<h1 id=\"Java-字节码文件\"><a href=\"#Java-字节码文件\" class=\"headerlink\" title=\"Java 字节码文件\"></a>Java 字节码文件</h1><p>class 文件本质是一个以 8 位字节为基础的二进制流。所有的 class 文件开头的前四个字节都是固定的魔数– 0xCAFEBABE  （咖啡宝贝）。当然这个主要是用来让 JVM 识别该文件是否为 class 文件<br>该 class 文件编译之前采用的 Java 版本在魔数之后的 4 个字节给出，前两个字节表示次版本号，后两个字节表示主版本号。class 文件的 10 进制形式能够在 oracle 官网进行版本查询，得知更加具体的版本号<br>比如我此时编译一份 java 文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">NUM</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> add(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b + num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">sub</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a - b - NUM;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1717636679191-592e658b-375d-44f1-b31c-c6e262a8d8e5.png#averageHue=%2339352f&clientId=u2db5ed67-1d88-4&from=paste&height=412&id=u16fc67c3&originHeight=772&originWidth=891&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=103764&status=done&style=none&taskId=ue9b5197e-87d1-44da-9d2b-7a32012e4f1&title=&width=475.2\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这还只是 class 文件的二进制形式，我们能够通过其他工具查看到更加具体的 class 字节码内容。<br>比如 idea 的自带的 view 功能。这里我们依然选择 person 类编译之后的 class 文件进行查看<br>选定 person.class 文件之后点击上方的 view，然后选择 Show ByteCode<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1717637395234-7db3aa5f-6732-4237-b928-bb284ea54bbf.png#averageHue=%232b2d31&clientId=u2db5ed67-1d88-4&from=paste&height=725&id=ue126df8f&originHeight=1360&originWidth=2560&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=500817&status=done&style=none&taskId=ua6b81c73-8d1e-4bf8-92b9-3633c426f7d&title=&width=1365.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>就可以得到这么一份还算比较好看的 Bytecode<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1717637421316-50c01060-83ac-484b-beb3-5bcd227dc70f.png#averageHue=%23262829&clientId=u2db5ed67-1d88-4&from=paste&height=730&id=u9197cf49&originHeight=1368&originWidth=1417&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=85328&status=done&style=none&taskId=ufe4b5178-5ce0-4385-94d7-88ac8dd09a4&title=&width=755.7333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>或者我们采用<code>javap</code>java 原生的字节码工具也能够查看。<br>来一份 javap 的参数表</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-help  --help  -?        输出此用法消息</span><br><span class=\"line\"> -version                 版本信息</span><br><span class=\"line\"> -v  -verbose             输出附加信息</span><br><span class=\"line\"> -l                       输出行号和本地变量表</span><br><span class=\"line\"> -<span class=\"keyword\">public</span>                  仅显示公共类和成员</span><br><span class=\"line\"> -<span class=\"keyword\">protected</span>               显示受保护的/公共类和成员</span><br><span class=\"line\"> -<span class=\"keyword\">package</span>                 显示程序包/受保护的/公共类</span><br><span class=\"line\">                          和成员 (默认)</span><br><span class=\"line\"> -p  -<span class=\"keyword\">private</span>             显示所有类和成员</span><br><span class=\"line\"> -c                       对代码进行反汇编</span><br><span class=\"line\"> -s                       输出内部类型签名</span><br><span class=\"line\"> -sysinfo                 显示正在处理的类的</span><br><span class=\"line\">                          系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class=\"line\"> -constants               显示最终常量</span><br><span class=\"line\"> -classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class=\"line\"> -cp &lt;path&gt;               指定查找用户类文件的位置</span><br><span class=\"line\"> -bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure>\n\n<p>这里用 <code>javap -verbose -p person.class</code> 生成的字节码查看如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">org</span>.example.person</span><br><span class=\"line\">  minor version: <span class=\"number\">0</span></span><br><span class=\"line\">  major version: <span class=\"number\">52</span></span><br><span class=\"line\">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #<span class=\"number\">1</span> = Methodref          #<span class=\"number\">6.</span>#<span class=\"number\">26</span>         <span class=\"comment\">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">   #<span class=\"number\">2</span> = Fieldref           #<span class=\"number\">5.</span>#<span class=\"number\">27</span>         <span class=\"comment\">// org/example/person.num:I</span></span><br><span class=\"line\">   #<span class=\"number\">3</span> = Methodref          #<span class=\"number\">5.</span>#<span class=\"number\">28</span>         <span class=\"comment\">// org/example/person.add:(II)I</span></span><br><span class=\"line\">   #<span class=\"number\">4</span> = Fieldref           #<span class=\"number\">5.</span>#<span class=\"number\">29</span>         <span class=\"comment\">// org/example/person.NUM:I</span></span><br><span class=\"line\">   #<span class=\"number\">5</span> = Class              #<span class=\"number\">30</span>            <span class=\"comment\">// org/example/person</span></span><br><span class=\"line\">   #<span class=\"number\">6</span> = Class              #<span class=\"number\">31</span>            <span class=\"comment\">// java/lang/Object</span></span><br><span class=\"line\">   #<span class=\"number\">7</span> = Utf8               num</span><br><span class=\"line\">   #<span class=\"number\">8</span> = Utf8               I</span><br><span class=\"line\">   #<span class=\"number\">9</span> = Utf8               NUM</span><br><span class=\"line\">  #<span class=\"number\">10</span> = Utf8               &lt;init&gt;</span><br><span class=\"line\">  #<span class=\"number\">11</span> = Utf8               ()V</span><br><span class=\"line\">  #<span class=\"number\">12</span> = Utf8               Code</span><br><span class=\"line\">  #<span class=\"number\">13</span> = Utf8               LineNumberTable</span><br><span class=\"line\">  #<span class=\"number\">14</span> = Utf8               LocalVariableTable</span><br><span class=\"line\">  #<span class=\"number\">15</span> = Utf8               <span class=\"built_in\">this</span></span><br><span class=\"line\">  #<span class=\"number\">16</span> = Utf8               Lorg/example/person;</span><br><span class=\"line\">  #<span class=\"number\">17</span> = Utf8               func</span><br><span class=\"line\">  #<span class=\"number\">18</span> = Utf8               (II)I</span><br><span class=\"line\">  #<span class=\"number\">19</span> = Utf8               a</span><br><span class=\"line\">  #<span class=\"number\">20</span> = Utf8               b</span><br><span class=\"line\">  #<span class=\"number\">21</span> = Utf8               add</span><br><span class=\"line\">  #<span class=\"number\">22</span> = Utf8               sub</span><br><span class=\"line\">  #<span class=\"number\">23</span> = Utf8               &lt;clinit&gt;</span><br><span class=\"line\">  #<span class=\"number\">24</span> = Utf8               SourceFile</span><br><span class=\"line\">  #<span class=\"number\">25</span> = Utf8               person.java</span><br><span class=\"line\">  #<span class=\"number\">26</span> = NameAndType        #<span class=\"number\">10</span>:#<span class=\"number\">11</span>        <span class=\"comment\">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">  #<span class=\"number\">27</span> = NameAndType        #<span class=\"number\">7</span>:#<span class=\"number\">8</span>          <span class=\"comment\">// num:I</span></span><br><span class=\"line\">  #<span class=\"number\">28</span> = NameAndType        #<span class=\"number\">21</span>:#<span class=\"number\">18</span>        <span class=\"comment\">// add:(II)I</span></span><br><span class=\"line\">  #<span class=\"number\">29</span> = NameAndType        #<span class=\"number\">9</span>:#<span class=\"number\">8</span>          <span class=\"comment\">// NUM:I</span></span><br><span class=\"line\">  #<span class=\"number\">30</span> = Utf8               org/example/person</span><br><span class=\"line\">  #<span class=\"number\">31</span> = Utf8               java/lang/Object</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">    flags: ACC_PRIVATE</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> NUM;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> org.example.person();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: invokespecial #<span class=\"number\">1</span>                  <span class=\"comment\">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">         <span class=\"number\">4</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">5</span>: iconst_1</span><br><span class=\"line\">         <span class=\"number\">6</span>: putfield      #<span class=\"number\">2</span>                  <span class=\"comment\">// Field num:I</span></span><br><span class=\"line\">         <span class=\"number\">9</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">3</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">4</span>: <span class=\"number\">4</span></span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            <span class=\"number\">0</span>      <span class=\"number\">10</span>     <span class=\"number\">0</span>  <span class=\"built_in\">this</span>   Lorg/example/person;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">func</span><span class=\"params\">(<span class=\"type\">int</span>, <span class=\"type\">int</span>)</span>;</span><br><span class=\"line\">    descriptor: (II)I</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">3</span>, locals=<span class=\"number\">3</span>, args_size=<span class=\"number\">3</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: iload_1</span><br><span class=\"line\">         <span class=\"number\">2</span>: iload_2</span><br><span class=\"line\">         <span class=\"number\">3</span>: invokevirtual #<span class=\"number\">3</span>                  <span class=\"comment\">// Method add:(II)I</span></span><br><span class=\"line\">         <span class=\"number\">6</span>: ireturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">8</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            <span class=\"number\">0</span>       <span class=\"number\">7</span>     <span class=\"number\">0</span>  <span class=\"built_in\">this</span>   Lorg/example/person;</span><br><span class=\"line\">            <span class=\"number\">0</span>       <span class=\"number\">7</span>     <span class=\"number\">1</span>     a   I</span><br><span class=\"line\">            <span class=\"number\">0</span>       <span class=\"number\">7</span>     <span class=\"number\">2</span>     b   I</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span>, <span class=\"type\">int</span>)</span>;</span><br><span class=\"line\">    descriptor: (II)I</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">3</span>, args_size=<span class=\"number\">3</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: iload_1</span><br><span class=\"line\">         <span class=\"number\">1</span>: iload_2</span><br><span class=\"line\">         <span class=\"number\">2</span>: iadd</span><br><span class=\"line\">         <span class=\"number\">3</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">4</span>: getfield      #<span class=\"number\">2</span>                  <span class=\"comment\">// Field num:I</span></span><br><span class=\"line\">         <span class=\"number\">7</span>: iadd</span><br><span class=\"line\">         <span class=\"number\">8</span>: ireturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">12</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            <span class=\"number\">0</span>       <span class=\"number\">9</span>     <span class=\"number\">0</span>  <span class=\"built_in\">this</span>   Lorg/example/person;</span><br><span class=\"line\">            <span class=\"number\">0</span>       <span class=\"number\">9</span>     <span class=\"number\">1</span>     a   I</span><br><span class=\"line\">            <span class=\"number\">0</span>       <span class=\"number\">9</span>     <span class=\"number\">2</span>     b   I</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">sub</span><span class=\"params\">(<span class=\"type\">int</span>, <span class=\"type\">int</span>)</span>;</span><br><span class=\"line\">    descriptor: (II)I</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">3</span>, args_size=<span class=\"number\">3</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: iload_1</span><br><span class=\"line\">         <span class=\"number\">1</span>: iload_2</span><br><span class=\"line\">         <span class=\"number\">2</span>: isub</span><br><span class=\"line\">         <span class=\"number\">3</span>: getstatic     #<span class=\"number\">4</span>                  <span class=\"comment\">// Field NUM:I</span></span><br><span class=\"line\">         <span class=\"number\">6</span>: isub</span><br><span class=\"line\">         <span class=\"number\">7</span>: ireturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">16</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            <span class=\"number\">0</span>       <span class=\"number\">8</span>     <span class=\"number\">0</span>  <span class=\"built_in\">this</span>   Lorg/example/person;</span><br><span class=\"line\">            <span class=\"number\">0</span>       <span class=\"number\">8</span>     <span class=\"number\">1</span>     a   I</span><br><span class=\"line\">            <span class=\"number\">0</span>       <span class=\"number\">8</span>     <span class=\"number\">2</span>     b   I</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;&#125;;</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">1</span>, locals=<span class=\"number\">0</span>, args_size=<span class=\"number\">0</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: bipush        <span class=\"number\">100</span></span><br><span class=\"line\">         <span class=\"number\">2</span>: putstatic     #<span class=\"number\">4</span>                  <span class=\"comment\">// Field NUM:I</span></span><br><span class=\"line\">         <span class=\"number\">5</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">5</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现结果还是不同的，javap 的生成感觉可读性更高。两者内容比较是没有问题的。<code>javap -verbose -p person.class</code>的内容直接把常量池中的所有信息都打印出来，我们也能够更好的查找。</p>\n<h2 id=\"常量池（Constant-pool）\"><a href=\"#常量池（Constant-pool）\" class=\"headerlink\" title=\"常量池（Constant pool）\"></a>常量池（Constant pool）</h2><p>最显著的就是我们最开始用<code>javap -verbose -p person.class</code>产生的结果中那一堆用#表示的信息。<br>常量池可以理解为 class 文件中的资源仓库，主要存放两大类常量：字面量(Literal),和符号引用(Symbolic References) 。字面量就类似于 java 中的常量概念，如文本字符串，final 常量等。而符号引用则属于编译原理方面的概念，包含以下三种：</p>\n<ul>\n<li>类接口的全限定名</li>\n<li>字段的名称和描述符号</li>\n<li>方法的名称和描述</li>\n</ul>\n<p>我们截取生成字节码中常量池的部分内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #<span class=\"number\">1</span> = Methodref          #<span class=\"number\">6.</span>#<span class=\"number\">26</span>         <span class=\"comment\">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">   #<span class=\"number\">2</span> = Fieldref           #<span class=\"number\">5.</span>#<span class=\"number\">27</span>         <span class=\"comment\">// org/example/person.num:I</span></span><br><span class=\"line\">   #<span class=\"number\">3</span> = Methodref          #<span class=\"number\">5.</span>#<span class=\"number\">28</span>         <span class=\"comment\">// org/example/person.add:(II)I</span></span><br><span class=\"line\">   #<span class=\"number\">4</span> = Fieldref           #<span class=\"number\">5.</span>#<span class=\"number\">29</span>         <span class=\"comment\">// org/example/person.NUM:I</span></span><br><span class=\"line\">   #<span class=\"number\">5</span> = Class              #<span class=\"number\">30</span>            <span class=\"comment\">// org/example/person</span></span><br><span class=\"line\">   #<span class=\"number\">6</span> = Class              #<span class=\"number\">31</span>            <span class=\"comment\">// java/lang/Object</span></span><br><span class=\"line\">   #<span class=\"number\">7</span> = Utf8               num</span><br><span class=\"line\">   #<span class=\"number\">8</span> = Utf8               I</span><br><span class=\"line\">  #<span class=\"number\">10</span> = Utf8               &lt;init&gt;</span><br><span class=\"line\">  #<span class=\"number\">11</span> = Utf8               ()V</span><br><span class=\"line\">  #<span class=\"number\">26</span> = NameAndType        #<span class=\"number\">10</span>:#<span class=\"number\">11</span>        <span class=\"comment\">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">  #<span class=\"number\">27</span> = NameAndType        #<span class=\"number\">7</span>:#<span class=\"number\">8</span></span><br><span class=\"line\">  #<span class=\"number\">31</span> = Utf8               java/lang/Object</span><br></pre></td></tr></table></figure>\n<p>举个例子，来看<code>#1 = Methodref      #6.#26    // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</code><br>它是一个方法引用（Methodref），指向了第 6 个和第 26 个常量，以此类推看第六个和第 26 个常量的组成，我们能够拼接出后面&#x2F;&#x2F;注释掉的内容<code>java/lang/Object.&quot;&lt;init&gt;&quot;:()V</code><br>这段其实可以理解为改类的实例构造器说明，由于我们所写的 person 方法没有重写构造方法，所以会调用到父类 Object 的构造方法，该方法的返回值为 V，也就是 void 为空<br>再来第二个常量举例 <code>#2 = Fieldref     #5.#27    // org/example/person.num:I</code><br>表明他是一个属性引用，由#5 和#27 常量组成，还是类推过去，我们可以得到后续注释一模一样的内容<code>org/example/person.num:I</code>这就是表明该常量#2 代表<code>org/example/</code>包下 person 类的属性 num，并且类型是 Int<br>第三个稍微记录一下<code>org/example/person.add:(II)I</code> 表明该方法引用代表<code>org/example</code>包下的 person 类的 add 方法，该方法由两个参数，并且返回值为 Int<br>这些都是与我们所写的 java 代码中能对应上的，只不过好像初始值没给出，还只是对其变量的一个 ref<br>最后类型的定义，稍微记录一下<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1717641740183-b078b901-a308-4936-b42a-58d164cfdf1a.png#averageHue=%23292f38&clientId=u28a3eb00-487e-4&from=paste&height=349&id=u19801e55&originHeight=763&originWidth=758&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=68613&status=done&style=none&taskId=u4e31d6e3-631c-4aef-ae10-1de0b5b6092&title=&width=346.2666931152344\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br> 对于数组类型，每一位使用一个前置的[字符来描述，如定义一个<code>java.lang.String[][]</code>类型的维数组，将被记录为<code>[[Ljava/lang/String;</code><br>补充一组访问标识：也就是各块描述中 flag&#x3D;????的内容<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1717642300346-ced108a6-6fcf-4670-9f1d-ce8b46dce909.png#averageHue=%232a3139&clientId=ubb7bd201-4783-4&from=paste&height=342&id=u9b315a15&originHeight=641&originWidth=1276&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=131356&status=done&style=none&taskId=ucee9e891-bfe8-4ae7-9ce1-67aca9db2ad&title=&width=680.5333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<h2 id=\"方法表集合\"><a href=\"#方法表集合\" class=\"headerlink\" title=\"方法表集合\"></a>方法表集合</h2><p> 最开始常量池的定义中我们单单只说它是字面量(Literal),和符号引用(Symbolic References)的资源仓库，并不表示类方法的具体内容，而紧接常量池的内容下面就是方法表集合。在字节码中，方法以表的集合形式表现。由于各种工具编码的问题，其实该处方法表的内容每个工具都有可能产生不同的细节，我们拿当前 javap 生成的字节码来分析类比<br>这里就拿一个构造方法来看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">public</span> org.example.person();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=<span class=\"number\">2</span>, locals=<span class=\"number\">1</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\">         <span class=\"number\">0</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">1</span>: invokespecial #<span class=\"number\">1</span>                  <span class=\"comment\">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class=\"line\">         <span class=\"number\">4</span>: aload_0</span><br><span class=\"line\">         <span class=\"number\">5</span>: iconst_1</span><br><span class=\"line\">         <span class=\"number\">6</span>: putfield      #<span class=\"number\">2</span>                  <span class=\"comment\">// Field num:I</span></span><br><span class=\"line\">         <span class=\"number\">9</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line <span class=\"number\">3</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        line <span class=\"number\">4</span>: <span class=\"number\">4</span></span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            <span class=\"number\">0</span>      <span class=\"number\">10</span>     <span class=\"number\">0</span>  <span class=\"built_in\">this</span>   Lorg/example/person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上面是javap的内容，下面是idea的内容</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> &lt;init&gt;()V</span><br><span class=\"line\">   L0</span><br><span class=\"line\">    LINENUMBER <span class=\"number\">3</span> L0</span><br><span class=\"line\">    ALOAD <span class=\"number\">0</span></span><br><span class=\"line\">    INVOKESPECIAL java/lang/Object.&lt;init&gt; ()V</span><br><span class=\"line\">   L1</span><br><span class=\"line\">    LINENUMBER <span class=\"number\">4</span> L1</span><br><span class=\"line\">    ALOAD <span class=\"number\">0</span></span><br><span class=\"line\">    ICONST_1</span><br><span class=\"line\">    PUTFIELD org/example/person.num : I</span><br><span class=\"line\">    RETURN</span><br><span class=\"line\">   L2</span><br><span class=\"line\">    LOCALVARIABLE <span class=\"built_in\">this</span> Lorg/example/person; L0 L2 <span class=\"number\">0</span></span><br><span class=\"line\">    MAXSTACK = <span class=\"number\">2</span></span><br><span class=\"line\">    MAXLOCALS = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>具体分析：</p>\n<ul>\n<li><code>descriptor: ()V</code>descriptor 主要是对该方法返回值的一个描述</li>\n<li><code>flags: ACC_PUBLIC</code>表示该方法是公共的，具体还有一些 flag 标识参考上方访问标识。</li>\n</ul>\n<p>code 块具体解析：</p>\n<ul>\n<li><code>stack=2</code>最大操作数栈，JVM 运行时会根据该值来分配栈帧中的操作栈深度，此处为 1（懵，学少了）</li>\n<li><code>locals</code>局部变量所需的存储空间，单位为 slot，slot 是虚拟机为局部变量分配内存时所使用的最小单位，为 4 个字节大小。其中，方法参数（实例方法中会固定隐藏一个 this），显示异常处理器参数（trycatch 块中 catch 所定义的异常），方法体中定义的局部变量，都需要使用局部变量表来存放。 locals的大小并不一定等于所有局部变量所占的Slot之和，因为局部变量中的Slot是可以重用的 。（…懵）</li>\n<li><code>args_size</code>方法参数的个数，这里实例化方法为什么会有 1 个参数呢？每个实例方法都会隐藏一个 this 参数</li>\n<li><code>attribute_info</code>这一块呢就是左边是 数字: 操作栈帧的所有内容了，叫做<strong>方法体内容。</strong>具体分析这些操作指令</li>\n</ul>\n<p><code>aload_0</code>：如果是aload_x，则表示从局部变量表中相应位置 x 装载一个对象引用到操作数栈的栈顶。如果是 aload_0,则表示把第零个引用类型本地变量（this 指针）推送到操作数栈顶。<br><code>invokespecial #1</code>：弹栈，并执行 #1 方法。这里我们首先是进行了一波aload_0，也就是把 this 变量压入了栈，然后 invoke 弹栈，将 this 弹出，并作为参数调用进了<init>初始化方法。<br><code>iconst_1</code>：将 int 型常量 1 推送至栈顶（留个伏笔，我们 person 不是有两个定义的属性吗）<br><code>putfield</code>：其实按英文翻译都能猜出来是在干嘛，其实就是为属性赋值。接受一个操作数，这个操作数引用的是运行时常量池的一个字段，比如我们这里#2，那么对应常量池就是<code> #2 = Fieldref  #5.#27  // org/example/person.num:I</code>，为 person 类的 num 属性值。putfield 会弹出两个栈顶两个值，我们刚才栈顶的值为 this 传入了构造 init 方法，所以 putfield 操作之后执行的就是 this.num&#x3D;1<br>最后一个操作码<code>return</code>，也就是返回空内容，方法执行结束。<br>还有一些 invoke 操作栈帧没有提及：</init></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">invokestatic：调用静态方法</span><br><span class=\"line\">invokespecial：调用实例构造方法 调用私有方法 调用父类方法</span><br><span class=\"line\">invokeinterface：调用接口方法</span><br><span class=\"line\">invokevirtual：调用虚方法（除上面三种情况之外的方法，如调用对象方法）</span><br><span class=\"line\">invokedynamic：Lambda的原理,即动态调用</span><br></pre></td></tr></table></figure>\n<p>当然还有很多指令栈帧没有提及，我们之后分析的时候遇到了再记录。</p>\n","feature":true,"text":"背景引入我们平常所写的 Java 是不能被 JVM 识别所运行的，必须将其编译成 class 文件，JVM 才能够识别代码，进行对应的程序操作。Java 有着”...","permalink":"/post/Java字节码初步学习","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"JavaSec","slug":"JavaSec","count":1,"path":"api/categories/JavaSec.json"}],"tags":[{"name":"Javabyte","slug":"Javabyte","count":1,"path":"api/tags/Javabyte.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">背景引入</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java-%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">Java 字节码文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F%E6%B1%A0%EF%BC%88Constant-pool%EF%BC%89\"><span class=\"toc-text\">常量池（Constant pool）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E8%A1%A8%E9%9B%86%E5%90%88\"><span class=\"toc-text\">方法表集合</span></a></li></ol></li></ol>","author":{"name":"stoocea","slug":"blog-author","avatar":"https://bu.dusays.com/2024/06/25/667ac0f8ca940.png","link":"/","description":"time thick away","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Java二次反序列化学习","uid":"9eef0bafd340d6fd0d85cf5145bacfba","slug":"Java二次反序列化","date":"2024-06-04T06:00:00.000Z","updated":"2024-06-04T06:16:38.516Z","comments":true,"path":"api/articles/Java二次反序列化.json","keywords":null,"cover":[],"text":"前言二次反序列化大多数时候是用来绕过黑名单或者解决不出网的问题，不会作为一条单独且完整的利用链存在，而是作为一个中间节点，用来绕过。二次反序列化一般来说有如下几...","permalink":"/post/Java二次反序列化","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[],"tags":[],"author":{"name":"stoocea","slug":"blog-author","avatar":"https://bu.dusays.com/2024/06/25/667ac0f8ca940.png","link":"/","description":"time thick away","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}