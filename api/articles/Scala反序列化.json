{"title":"Scala反序列化学习","uid":"48e10c1cbdfed8072bf73a256dffc031","slug":"Scala反序列化","date":"2024-07-06T07:41:00.000Z","updated":"2024-07-06T07:47:03.195Z","comments":true,"path":"api/articles/Scala反序列化.json","keywords":null,"cover":"https://bu.dusays.com/2024/07/06/6688f65f8215e.png","content":"<p>复现 CVE 的时候遇到了，趁此机会学一下<br>原 CVE 的 issue<br><a href=\"https://github.com/scala/scala/pull/10118\">https://github.com/scala/scala/pull/10118</a><br>环境链接：<br><a href=\"https://github.com/yarocher/lazylist-cve-poc\">https://github.com/yarocher/lazylist-cve-poc</a><br>参考文章：<br><a href=\"https://www.freebuf.com/articles/network/375109.html\">https://www.freebuf.com/articles/network/375109.html</a></p>\n<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><h2 id=\"scala-简介\"><a href=\"#scala-简介\" class=\"headerlink\" title=\"scala 简介\"></a>scala 简介</h2><p>scala 本身就是一门语言，它运行在 JVM 中，并且能够兼容现有的 java 程序。scala 经过编译之后是生成的 java 字节码，这也是它能够运行在 JVM 上的理由，也可以调用 Java 现有的类库。<br>但是 Scala 也有着自己的语法规则，并且有一些区别于 Java 的特性，对于这些新东西或者特性，接下来的基础笔记会一一写到。</p>\n<h2 id=\"scala-新特性\"><a href=\"#scala-新特性\" class=\"headerlink\" title=\"scala 新特性\"></a>scala 新特性</h2><h3 id=\"匹配器-match\"><a href=\"#匹配器-match\" class=\"headerlink\" title=\"匹配器 match\"></a>匹配器 match</h3><p>一个 scala2 中的例子，整体代码如下（怎么感觉写起来像 python）</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">object</span><span style=\"color: #B392F0\"> Main &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> show(result</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\">String)</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\">Unit</span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    println(result)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> main(args: Array[String])</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Unit </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> x</span><span style=\"color: #F97583\">=</span><span style=\"color: #F8F8F8\">11</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> y</span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\">x </span><span style=\"color: #F97583\">match</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">case</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">1</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=&gt;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;one&quot;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">case</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">2</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">=&gt;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;two&quot;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">case</span><span style=\"color: #B392F0\"> other </span><span style=\"color: #F97583\">=&gt;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">s</span><span style=\"color: #FFAB70\">&quot;other: </span><span style=\"color: #F97583\">$</span><span style=\"color: #B392F0\">other</span><span style=\"color: #FFAB70\">&quot;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #6B737C\">// other是一个变量名，它会接收除了1和2以外的任何值</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">case</span><span style=\"color: #B392F0\"> _ </span><span style=\"color: #F97583\">=&gt;</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">s</span><span style=\"color: #FFAB70\">&quot;other: _&quot;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    show(y)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">//other: 11</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span></code></pre></div><p>这里我们可以看出 match 的主要使用是在某一个变量后，也就是判断该变量为什么情况时，将对应值返回给该变量。<br>具体用法如下：</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">x </span><span style=\"color: #F97583\">match</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">case</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">1</span><span style=\"color: #F97583\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">case</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">2</span><span style=\"color: #F97583\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">case</span><span style=\"color: #B392F0\"> other </span><span style=\"color: #F97583\">=&gt;</span><span style=\"color: #6B737C\">//除了1 2情况，的其他情况</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">case</span><span style=\"color: #B392F0\"> _</span><span style=\"color: #F97583\">=&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">这里other的优先级是要比默认情况的_要高的，我们看运行结果也能看出来</span></span></code></pre></div><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720083487768-84937eb9-bf48-40dc-b29a-69f841f5fbd8.png#averageHue=%232c2e2d&clientId=u565db21d-1766-4&from=paste&height=633&id=u62a8978d&originHeight=1186&originWidth=2478&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=1076666&status=done&style=none&taskId=u8f3cf64e-78fa-4596-b855-f212b65dd8b&title=&width=1321.6\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>总之 match 就是一个选择器，返回不同情况下的结果，当然 match 还有更多用法，这里我们只是粗略学习</p>\n<h3 id=\"伴生对象\"><a href=\"#伴生对象\" class=\"headerlink\" title=\"伴生对象\"></a>伴生对象</h3><p>具体定义：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> 伴生对象是Scala中一种特殊的<strong>单例对象</strong>，它与一个<strong>同名的类</strong>存在于同一个文件中，这个类被称为<strong>伴生类</strong></p></blockquote>\n<p>具体实例代码：</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> Person(</span><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> name</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> String, </span><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> age</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Int) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">private</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> secret </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;I love Scala&quot;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> sayHello()</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Unit </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    println(</span><span style=\"color: #F97583\">s</span><span style=\"color: #FFAB70\">&quot;Hello, I am </span><span style=\"color: #F97583\">$</span><span style=\"color: #B392F0\">name</span><span style=\"color: #FFAB70\">, </span><span style=\"color: #F97583\">$</span><span style=\"color: #B392F0\">age</span><span style=\"color: #FFAB70\"> years old.&quot;</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6B737C\">// 定义一个Person对象，作为伴生对象</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">object</span><span style=\"color: #B392F0\"> Person &#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">var</span><span style=\"color: #B392F0\"> count </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> increase()</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Unit </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    count </span><span style=\"color: #F97583\">+=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">1</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    println(</span><span style=\"color: #F97583\">s</span><span style=\"color: #FFAB70\">&quot;Person count: </span><span style=\"color: #F97583\">$</span><span style=\"color: #B392F0\">count</span><span style=\"color: #FFAB70\">&quot;</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> showSec()</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\">Unit</span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    println(apply(</span><span style=\"color: #FFAB70\">&quot;test&quot;</span><span style=\"color: #B392F0\">,</span><span style=\"color: #F8F8F8\">1</span><span style=\"color: #B392F0\">).secret)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// 定义一个apply方法，用于创建Person类的实例</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> apply(name: String, age: Int)</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Person </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    increase()</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> Person(name, age) </span><span style=\"color: #6B737C\">// 返回新的Person对象</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #6B737C\">// 定义一个unapply方法，用于提取Person类的属性</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> unapply(person: Person)</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Option[(String, Int)] </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">if</span><span style=\"color: #B392F0\"> (person </span><span style=\"color: #F97583\">==</span><span style=\"color: #B392F0\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #B392F0\">) None </span><span style=\"color: #6B737C\">// 如果person为空，返回None</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">else</span><span style=\"color: #B392F0\"> Some(person.name, person.age) </span><span style=\"color: #6B737C\">// 否则返回Some元组</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">object</span><span style=\"color: #B392F0\"> Main &#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> main(args: Array[String])</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Unit </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// 使用伴生对象的apply方法创建Person类的实例，省略了new关键字</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> p1 </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> Person(</span><span style=\"color: #FFAB70\">&quot;Alice&quot;</span><span style=\"color: #B392F0\">, </span><span style=\"color: #F8F8F8\">20</span><span style=\"color: #B392F0\">)</span><span style=\"color: #6B737C\">//Person count: 1</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> p2 </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> Person(</span><span style=\"color: #FFAB70\">&quot;Bob&quot;</span><span style=\"color: #B392F0\">, </span><span style=\"color: #F8F8F8\">25</span><span style=\"color: #B392F0\">)</span><span style=\"color: #6B737C\">//Person count: 2</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// 使用伴生对象的字段和方法</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    println(Person.count) </span><span style=\"color: #6B737C\">// 输出2</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    Person.increase() </span><span style=\"color: #6B737C\">// Person count: 3</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    Person.showSec()</span><span style=\"color: #6B737C\">//输出Person count: 4</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">                    </span><span style=\"color: #6B737C\">//I love Scala(伴生对象可以访问伴生类的私有成员)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// 使用伴生类的字段和方法</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">/*</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">    println(p1.secret)// 无法访问私有成员</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">     */</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    p1.sayHello() </span><span style=\"color: #6B737C\">// 输出Hello, I am Alice, 20 years old.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">// 使用模式匹配和提取器，利用伴生对象的unapply方法</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> p3</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">null</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    p1 </span><span style=\"color: #F97583\">match</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">case</span><span style=\"color: #B392F0\"> Person(name, age) </span><span style=\"color: #F97583\">=&gt;</span><span style=\"color: #B392F0\"> println(</span><span style=\"color: #F97583\">s</span><span style=\"color: #FFAB70\">&quot;</span><span style=\"color: #F97583\">$</span><span style=\"color: #B392F0\">name</span><span style=\"color: #FFAB70\"> is </span><span style=\"color: #F97583\">$</span><span style=\"color: #B392F0\">age</span><span style=\"color: #FFAB70\"> years old.&quot;</span><span style=\"color: #B392F0\">) </span><span style=\"color: #6B737C\">// 输出Alice is 20 years old.</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">case</span><span style=\"color: #B392F0\"> _ </span><span style=\"color: #F97583\">=&gt;</span><span style=\"color: #B392F0\"> println(</span><span style=\"color: #FFAB70\">&quot;Unknown person.&quot;</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    p3 </span><span style=\"color: #F97583\">match</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">case</span><span style=\"color: #B392F0\"> Person(name, age) </span><span style=\"color: #F97583\">=&gt;</span><span style=\"color: #B392F0\"> println(</span><span style=\"color: #F97583\">s</span><span style=\"color: #FFAB70\">&quot;</span><span style=\"color: #F97583\">$</span><span style=\"color: #B392F0\">name</span><span style=\"color: #FFAB70\"> is </span><span style=\"color: #F97583\">$</span><span style=\"color: #B392F0\">age</span><span style=\"color: #FFAB70\"> years old.&quot;</span><span style=\"color: #B392F0\">) </span><span style=\"color: #6B737C\">// 输出Unknown person.</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">      </span><span style=\"color: #F97583\">case</span><span style=\"color: #B392F0\"> _ </span><span style=\"color: #F97583\">=&gt;</span><span style=\"color: #B392F0\"> println(</span><span style=\"color: #FFAB70\">&quot;Unknown person.&quot;</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span></code></pre></div><p>示例代码就 3 个部分，具体类，伴生对象，main 运行逻辑。<br>这里看到其实伴生对象就是和具体类同名的对象，然后里面有一个 apply 方法和 unapply 方法，我们等下讲，先看其他的具体方法</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> increase()</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Unit </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    count </span><span style=\"color: #F97583\">+=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">1</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    println(</span><span style=\"color: #F97583\">s</span><span style=\"color: #FFAB70\">&quot;Person count: </span><span style=\"color: #F97583\">$</span><span style=\"color: #B392F0\">count</span><span style=\"color: #FFAB70\">&quot;</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #6B737C\">//count的初值是1，这里的逻辑就是让count+1,然后讲count输出出来</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> showSec()</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\">Unit</span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\">&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    println(apply(</span><span style=\"color: #FFAB70\">&quot;test&quot;</span><span style=\"color: #B392F0\">,</span><span style=\"color: #F8F8F8\">1</span><span style=\"color: #B392F0\">).secret)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">//调用apply方法，并且将调用apply方法的secret值，并将其输出</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span></code></pre></div><h4 id=\"apply-方法\"><a href=\"#apply-方法\" class=\"headerlink\" title=\"apply 方法\"></a>apply 方法</h4><p>apply 方法为我们提供了一段快速创建实例化对象的手段，也就是我们不需要去写 <code>new person</code>，直接 <code>person(&quot;hello&quot;)</code>,即可创建对象然后使用，然后将实例化方法的传参传给 apply，并且调用 apply 的逻辑，完成实例化。我们类比 <code>__contruct</code> 构造方法即可<br>那我们这里的 apply 方法</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> apply(name: String, age: Int)</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Person </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    increase()</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> Person(name, age) </span><span style=\"color: #6B737C\">// 返回新的Person对象</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span></code></pre></div><p>它返回的就是一个 Person 类的实例<br>然后记录一下伴生对象的特性：</p>\n<ul>\n<li>伴生对象和伴生类可以互相访问对方的私有成员，包括字段和方法。</li>\n<li>伴生对象的成员相当于Java中的静态成员，可以直接通过对象名调用，而不需要创建对象实例。</li>\n<li>伴生对象可以实现apply方法，用于创建伴生类的实例，这样就可以省略new关键字。</li>\n<li>伴生对象可以实现unapply方法，用于实现模式匹配和提取器的功能。</li>\n<li>伴生对象可以扩展一个或多个特质（trait），从而实现多重继承和混入（mixin）的效果。</li>\n</ul>\n<p>相当于给定义类的一段扩展功能</p>\n<h3 id=\"trait\"><a href=\"#trait\" class=\"headerlink\" title=\"trait\"></a>trait</h3><p>类似于 java 中的接口，它可以被类或者对象扩展，也可以 <code>mix in</code>混入（scala 中的新特性）<br>trait 特质，能够被多层继承，也就是说我们一个类或者一个对象能够继承多个 trait，从而获得所有特质中的所有属性和方法<br>具体定义代码示例：</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">trait</span><span style=\"color: #B392F0\"> PersonBody &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> height</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Int</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span></code></pre></div><p>扩展单个属性以及扩展多个属性示例如下：</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">trait</span><span style=\"color: #B392F0\"> PersonBody &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">var</span><span style=\"color: #B392F0\"> height</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Int</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">trait</span><span style=\"color: #B392F0\"> PersonHobby&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">var</span><span style=\"color: #B392F0\"> hobbyGame</span><span style=\"color: #F97583\">=</span><span style=\"color: #FFAB70\">&quot;Honor of King : World&quot;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> showHobby()</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6B737C\">//单个扩展继承</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> Person3(name : String) </span><span style=\"color: #F97583\">extends</span><span style=\"color: #B392F0\"> PersonBody&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">override</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">var</span><span style=\"color: #B392F0\"> height</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Int </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">170</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6B737C\">//多个扩展继承</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> Person2(</span><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> name</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> String,</span><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> age</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Int) </span><span style=\"color: #F97583\">extends</span><span style=\"color: #B392F0\"> PersonBody </span><span style=\"color: #F97583\">with</span><span style=\"color: #B392F0\"> PersonHobby&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">override</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">var</span><span style=\"color: #B392F0\"> height</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Int </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F8F8F8\">171</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">var</span><span style=\"color: #B392F0\"> Name</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> String </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\">name</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">var</span><span style=\"color: #B392F0\"> Age</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Int</span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\">age</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">override</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> showHobby()</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Unit </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    println(</span><span style=\"color: #F97583\">s</span><span style=\"color: #FFAB70\">&quot;no hobby,this is test&quot;</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">object</span><span style=\"color: #B392F0\"> Main &#123;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> main(args: Array[String])</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Unit </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">var</span><span style=\"color: #B392F0\"> person </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #B392F0\"> Person3(</span><span style=\"color: #FFAB70\">&quot;Cloud&quot;</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    println(person.height)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #6B737C\">//170</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">var</span><span style=\"color: #B392F0\"> person2</span><span style=\"color: #F97583\">=new</span><span style=\"color: #B392F0\"> Person2(</span><span style=\"color: #FFAB70\">&quot;stoocea&quot;</span><span style=\"color: #B392F0\">,</span><span style=\"color: #F8F8F8\">20</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    person2.showHobby()</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span></code></pre></div><h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><p>匿名函数的官方定义：是作为参数传递给高阶函数的代码块。简要讲就是他是一个代码块，能够作为参数写传入函数。作为代码块就一定会执行逻辑，有如下例子：</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> ints </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> List(</span><span style=\"color: #F8F8F8\">1</span><span style=\"color: #B392F0\">, </span><span style=\"color: #F8F8F8\">2</span><span style=\"color: #B392F0\">, </span><span style=\"color: #F8F8F8\">3</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> doubledInts </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> ints.map((i : Int)</span><span style=\"color: #F97583\">=&gt;</span><span style=\"color: #B392F0\">i</span><span style=\"color: #F97583\">*</span><span style=\"color: #F8F8F8\">2</span><span style=\"color: #B392F0\">)</span></span></code></pre></div><p>我们定义了一段整数 List ints，然后我们还定义了一段 doubleInts，他是 ints 整数 List 经过 map 方法处理之后得到的。观察 map 方法的参数<code>(i : Int)=&gt;i*2</code>，初看有点看不懂，其实它就是匿名函数， <code>=&gt;</code>左边代表我们函数的参数定义，右边代表匿名函数的具体逻辑<br>所以这里的效果就是将 Ints 整数 List 中的所有变量 i 都乘以 2，然后调用 map 方法创建一个新的列表。当然匿名函数还有许多的形式，这里只是最初始，且最好理解的形式 （我个人认为）</p>\n<h3 id=\"惰性列表-LazyList\"><a href=\"#惰性列表-LazyList\" class=\"headerlink\" title=\"惰性列表 LazyList*\"></a>惰性列表 LazyList*</h3><p>LazyList 是 scala2.13 版本之后引入的新的集合类型。惰性列表是为了惰性求值，而惰性求值的意思是：列表中的元素并不是一开始就会加载和计算好，而是只有在被需要的时候才会被计算。这句话其实包含了两层意思：1.有限元素下的节省内存和时间 2.无限元素下的节省内存和时间，只有用到了才会给你取，并且是无限取。</p>\n<p>一些惰性列表的成员：</p>\n<table>\n<thead>\n<tr>\n<th>state</th>\n<th>字段</th>\n<th>存储LazyList对象的状态，表示惰性序列的结构和计算状态，算是 LazyList 的具体值存储字段</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>State</td>\n<td>特质，以及它的伴生对象</td>\n<td>定义LazyList对象的状态的特质，有两个子类：Cons和Empty</td>\n</tr>\n<tr>\n<td>tail</td>\n<td>方法</td>\n<td>返回一个新的LazyList对象，包含除了第一个元素之外的所有元素，惰性求值</td>\n</tr>\n<tr>\n<td>head</td>\n<td>方法</td>\n<td>返回LazyList对象的第一个元素，严格求值</td>\n</tr>\n</tbody></table>\n<p>示例代码</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">object</span><span style=\"color: #B392F0\"> Main&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> ones </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> LazyList.continually(</span><span style=\"color: #F8F8F8\">1</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> main(args: Array[String])</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Unit </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    println(ones)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span></code></pre></div><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720088551679-dfa93ba6-a4eb-4293-a449-6c65f7302530.png#averageHue=%232f3030&clientId=uca9627dc-b4f2-4&from=paste&height=347&id=u55c70b5b&originHeight=650&originWidth=2507&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=660359&status=done&style=none&taskId=u2391c590-01bc-4d60-932e-1136ead8b15&title=&width=1337.0666666666666\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>会发现 LazyList 里面的内容为空，这个时候我们象征性地将他里面的第一个元素取出来,用到一开始提到的 head 方法</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">object</span><span style=\"color: #B392F0\"> Main&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">val</span><span style=\"color: #B392F0\"> ones </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> LazyList.continually(</span><span style=\"color: #F8F8F8\">1</span><span style=\"color: #B392F0\">)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> main(args: Array[String])</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> Unit </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    println(ones.head)</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span></code></pre></div><p><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720088664446-fabd6946-6566-493c-a581-5f5c9f41ab91.png#averageHue=%23333637&clientId=uca9627dc-b4f2-4&from=paste&height=305&id=u9e7efb7d&originHeight=572&originWidth=2484&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=541124&status=done&style=none&taskId=uaaf2bb74-a881-4088-9751-3e1c8e57dea&title=&width=1324.8\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>从一开始的 LazyList 创建开始，由于我们并没有直接 new 出 LazyList，而是直接调用continually 方法，所以会来到它伴生对象的 continually 方法<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720095803635-d31c2c44-496c-4233-9655-cacc40976d6c.png#averageHue=%232e322f&clientId=ucf22a51f-efc1-4&from=paste&height=127&id=uac54c50e&originHeight=239&originWidth=1624&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=184226&status=done&style=none&taskId=u75617311-e18c-4fe7-b121-2317e52a348&title=&width=866.1333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>newLL 就是创建一个新的 LazyList，注意此时我们传入的参数 1 被作为参数 elem 传入，流入到 sCons 方法和下一轮的 continually 方法的循环。<br>先看 sCons 方法的具体内容<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720097149611-3698fa52-a199-4d18-8449-5ab37709bae0.png#averageHue=%232d2f2e&clientId=ucf22a51f-efc1-4&from=paste&height=73&id=ud4a09236&originHeight=137&originWidth=1762&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=117117&status=done&style=none&taskId=ud51ab803-e571-4c85-96b2-c23145f1671&title=&width=939.7333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>hd 是 1，tl 是通过 continually 创建好的新的一个 LazyList。具体的方法内容创建了一个新的 State trait实例。一开始我们提到 State 是一段特质，并且有它具体的伴生对象，里面共有两个方法，一个是 head 方法，一个是 tail 方法，对于 State 这个 trait 来说，它的 head 方法就是返回当前的元素，tail 方法方法就是返回存有无限个 1 的 LazyList<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720099820117-6e2bc04b-75d7-49b2-b79a-6976b512270c.png#averageHue=%232c2f2e&clientId=ucf22a51f-efc1-4&from=paste&height=262&id=u012e9722&originHeight=492&originWidth=1925&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=448155&status=done&style=none&taskId=u033cbf75-4332-493e-b818-7647585bcf4&title=&width=1026.6666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>再看 newLL 方法，具体内容就是将刚才创建好的 State 特质实例作为 <code>new LazyList</code>实例化构造的参数传入<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720096267815-c42d5ae9-795f-4c07-9b94-710d37d5b8e1.png#averageHue=%232e302f&clientId=ucf22a51f-efc1-4&from=paste&height=90&id=ue68e042b&originHeight=168&originWidth=1802&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=137584&status=done&style=none&taskId=u96772f85-32d5-4b3e-af8b-1e9b2a8e54d&title=&width=961.0666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>所以，整个 Continually 方法的返回值就是这一个装载了 State 实例对象的 LazyList，但是此时里面是空的，这也是为什么我们紧接着将其 println 的话，出来的结果就是<code>LazyList(&lt;not computed&gt;)</code>。因为我们并没有对 state 进行任何的调用或者赋值，那么就看下面的 head 方法的调用<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720100475779-bbb97f37-0485-4410-8d5e-dce370b09f9c.png#averageHue=%232f3331&clientId=ucf22a51f-efc1-4&from=paste&height=60&id=u09cfefb7&originHeight=112&originWidth=1125&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=52638&status=done&style=none&taskId=u02307df5-4aca-4b3e-a394-eb4ec7ecd11&title=&width=600\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>很简单的一段，直接去调用 state 的 head 参数，我们接着看 state 是怎么定义的<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720100645356-96f8d45d-9122-403a-9301-2a9a41d62098.png#averageHue=%232b2e2d&clientId=ucf22a51f-efc1-4&from=paste&height=333&id=u5ca6a7ce&originHeight=624&originWidth=2025&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=558079&status=done&style=none&taskId=u9185d3d0-4854-45c2-885a-299a8190546&title=&width=1080\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>具体的逻辑是通过调用 lazyState 方法获取到当前的 State，并且通过调用 State 的 head 和 tail 方法获取值。</p>\n<h1 id=\"LazyList-的反序列化\"><a href=\"#LazyList-的反序列化\" class=\"headerlink\" title=\"LazyList 的反序列化\"></a>LazyList 的反序列化</h1><h2 id=\"工作流程分析\"><a href=\"#工作流程分析\" class=\"headerlink\" title=\"工作流程分析\"></a>工作流程分析</h2><p>在研究 LazyList 的时候其实我们发现了它本身是继承 serializable 接口的，所以它能够反序列化，并且有个专门的类来处理反序列化和序列化<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720101173545-1afec4bc-d913-4085-a139-7671fe372e69.png#averageHue=%232b2d2c&clientId=ucf22a51f-efc1-4&from=paste&height=519&id=u1f662123&originHeight=973&originWidth=1656&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=653497&status=done&style=none&taskId=u142bc4c5-c068-4e0d-bc96-e5d749ad090&title=&width=883.2\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>writeObject 内容大致可以概括为：</p>\n<ul>\n<li>调用 javaio 原生的序列化流的<code>defaultWriteObject()</code>方法，开一段 Object 的序列化数据流，准备序列化</li>\n<li>然后一个 while 循环去遍历 LazyList 已经计算出来的元素，并且将其每一个都进行序列化操作，然后递归到后续的元素，继续重复操作</li>\n<li>序列化一个 <strong>SerializeEnd</strong> 标识符</li>\n<li>然后对该 LazyList 剩下的未计算的元素，也就是没有加载的元素也进行一次序列化操作</li>\n</ul>\n<p>readObject 的内容大致可以概括为：</p>\n<ul>\n<li>调用 javaio 的原生反序列化流的<code>defaultReadObject()</code>，开一段反序列化的数据流，准备反序列化</li>\n<li>初始化一段字节数组 init  用来存储已经计算出来的元素  </li>\n<li>while 循环开始反序列化该序列化流种的元素，并且判定是否为特殊的**SerializeEnd **标识符，也就是判断有效计算的元素是否已经反序列化完毕。如果不是，将其存入 init 数组，如果是，说明有效元素已经反序列化完毕了，跳出该循环</li>\n<li>反序列化剩下没有计算的元素</li>\n<li>使用++方法链接 init 和 tail（噢那真的牛逼，还有这种方法）</li>\n</ul>\n<h2 id=\"漏洞点分析\"><a href=\"#漏洞点分析\" class=\"headerlink\" title=\"漏洞点分析\"></a>漏洞点分析</h2><p>乍一看好像 LazyList 的 readObject 没有可以利用的地方，我们跟进后续的链接操作，也就是 init 和 tail 链接的逻辑<code>coll = init ++: tail</code><br>我们跟进<code>++:</code>方法<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720109109269-1ed81014-2258-4ce0-a9d7-88ea357970a5.png#averageHue=%232d2f2f&clientId=u61d5917a-db06-4&from=paste&height=89&id=u6e27197f&originHeight=166&originWidth=1897&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=140009&status=done&style=none&taskId=u8e660897-1b6d-4a3e-a324-a29721a69b4&title=&width=1011.7333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>具体的内容是将 prefix，链接操作的后半段 B 作为参数，调用进 prependedAll 方法。而 prependedAll 方法在 LazyList 中是被重构了的，跟进具体定义<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720109236242-5ac53fa2-5cbd-442c-b097-be5ef3e61ddf.png#averageHue=%232d2f2e&clientId=u61d5917a-db06-4&from=paste&height=129&id=udc601407&originHeight=242&originWidth=1807&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=228864&status=done&style=none&taskId=ub0fdcdab-a205-4c2d-82e2-5cbc459bfe1&title=&width=963.7333333333333\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这里首先是一段 if 判断，判断条件是调用 knownIsEmpty 的返回结果，这里接着跟进knownIsEmpty 方法<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720109331701-39a3b51d-d617-4637-a716-de1b4b502731.png#averageHue=%23333734&clientId=u61d5917a-db06-4&from=paste&height=37&id=u476b2595&originHeight=70&originWidth=1716&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=63820&status=done&style=none&taskId=uf0244719-d2b7-477b-88d0-42ca9e5428f&title=&width=915.2\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>具体方法内容是一段 合运算，当这里<code>stateEvaluated</code>为 true 时，后续才会调用 isEmpty 方法，这里继续跟进 isEmpty。方法具体逻辑为 state 字段和 State 的 Empty 实例进行比较，也就是判断 state 是否为空啦<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720109387450-ea7eaf8f-59bf-4a58-a285-eb50be64a575.png#averageHue=%23303231&clientId=u61d5917a-db06-4&from=paste&height=58&id=u41783e5f&originHeight=108&originWidth=1218&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=52360&status=done&style=none&taskId=u50477feb-6326-4a7b-b322-997585e1add&title=&width=649.6\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>那么这里就跟我们之前提到过的 state 懒加载机制，当我们调用到 state 的时候会执行 state 的定义逻辑<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720109542187-12410016-b8c4-45b5-9ca2-62f668ded63e.png#averageHue=%232a2c2b&clientId=u61d5917a-db06-4&from=paste&height=330&id=ue295500d&originHeight=619&originWidth=2018&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=560422&status=done&style=none&taskId=u3d34a7de-ed67-4470-a7fb-cf8d488fb98&title=&width=1076.2666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>这里稳定执行一段 lazyState 方法，这个方法是 LazyList 构造器传入的匿名函数，当我们对其跟进的时候，会发现如下情况：<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720109618946-6b6b0c89-5ea6-4a8f-bd0f-5ab23916c968.png#averageHue=%2342464a&clientId=u61d5917a-db06-4&from=paste&height=114&id=u7952aec4&originHeight=214&originWidth=2385&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=142979&status=done&style=none&taskId=ub85f02bf-2c2e-4141-b75c-890d032f4a8&title=&width=1272\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br><strong>他会生成一段伴生对象，并且带有 apply 方法</strong>。了解了这点，我们继续跟进，就会发现其本质是一段可控无参匿名函数<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720109662908-efb175d1-d351-480c-b1b2-01ade599372a.png#averageHue=%232c2e2c&clientId=u61d5917a-db06-4&from=paste&height=237&id=ueda1332c&originHeight=445&originWidth=1895&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=394027&status=done&style=none&taskId=u1bf230fc-03f3-4315-99a6-0c9dec20f92&title=&width=1010.6666666666666\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>所以我们可以提前将其设置为一段符合条件的匿名函数，就能够进一步利用了。</p>\n<h2 id=\"可利用匿名函数寻找\"><a href=\"#可利用匿名函数寻找\" class=\"headerlink\" title=\"可利用匿名函数寻找\"></a>可利用匿名函数寻找</h2><p>最终落到了寻找 scala 或者 java 中原生无参匿名函数，且可利用。单论这个条件是很难找到合适的方法的<br>我们最后多提了一嘴：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>他会生成一段伴生对象，并且带有 apply 方法</p></blockquote>\n<p>实际上不是的，在 scala 中，所有的无参匿名函数都会被编译为一段实现了 Function0 接口的实现对象，也就是一个针对于 Function0 的，带有 apply 方法的一个对象（具体这么做的原因我就不清楚了，翻了一下文档也没找到很好的解释）<br>那么我们又多了一条寻找的线索：寻找实现了 Function0 的所有类或对象，也能够算是找到了一个对应的无参匿名函数。<br>结合师傅已经在原文中提到关于匿名函数的另外的内容</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> Scala编译器在编译Scala代码时，会将匿名函数转换成Java字节码，这样就可以在Java虚拟机上运行。为了与Java兼容，Scala编译器会为每个匿名函数生成一个类，并给这个类一个特殊的名字，通常是anonfun加上一些数字和符号。这个类名的作用是唯一地标识这个匿名函数，以便在运行时调用。</p></blockquote>\n<p>所以在 JVM 内识别匿名函数的时候，实际上是在识别这些类，我们的目标也可以改为寻找这些类了</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> 以 POC 中的 scala.sys.process.ProcessBuilderImpl$URLInput$$anonfun$$lessinit$greater$1为例<br>$URLInput:表示ProcessBuilderImpl的内部类<br>$$anonfun:表示匿名函数的前缀，表示这是一个自动生成的类。<br>$$lessinit$greater:是<init>的转义形式，表示这个匿名函数是在构造器中定义的。<br>$1:是匿名函数的序号，表示这是第一个匿名函数。</init></p></blockquote>\n<p>具体跟进一下 ProcessBuilderImpl<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720111329418-fa4862ab-b8d4-4f27-ae49-7fe26ce67bd6.png#averageHue=%23383b3a&clientId=u61d5917a-db06-4&from=paste&height=427&id=u903b2371&originHeight=801&originWidth=885&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=386025&status=done&style=none&taskId=uf0b86291-4225-4bc8-aed2-2efeea6ad9d&title=&width=472\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>如果我们接着跟进 URLInput 的下一个子类，发现找不到了，只有这么多内容<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720111423212-ba854366-63af-4be6-84cf-0c62393e8c9d.png#averageHue=%233b3e3f&clientId=u61d5917a-db06-4&from=paste&height=37&id=u7d614f1e&originHeight=69&originWidth=1811&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=62915&status=done&style=none&taskId=ub2928dbc-2ddc-41e0-9ec6-2c6deca98a7&title=&width=965.8666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>那这个后续<code>$$anonfun$$lessinit$greater$1</code>是怎么生成的呢？我们一个一个来探究<br>就比如<code>$anonfun$$lessinit$greater</code>这一段生成，结合<code>ProcessBuilderImpl</code>类中关于 URLInput 的定义部分，我们猜测当一个类继承了一个父类，并且这个被继承的父类的构造方法参数调用了子类的构造参数的方法时，scala 会生成一段<code>$$anonfun$$lessinit$greater$</code>类名的类<br>来一段与之意思相近的示例代码</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> a()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> msg()</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> String </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;i am class a&quot;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> b (name</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\">String)</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> c(url</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\">a) </span><span style=\"color: #F97583\">extends</span><span style=\"color: #B392F0\"> b(url.msg())</span></span></code></pre></div><p>大致逻辑就是 c 继承自 b，并且 b 的构造方法中调用了 c 构造方法的参数 url<br>看一下测试结果，好像并不是和我们猜测的那样，只是生成了 3 段 abc 字节码<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720112333189-d82c82be-e9f6-4a67-83fd-85e7f644ac35.png#averageHue=%23303337&clientId=u2d8e4ee3-0855-4&from=paste&height=646&id=u6d6f0d30&originHeight=1212&originWidth=2108&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=2655431&status=done&style=none&taskId=u0d16a410-f072-4e4b-9e46-5b0d7367087&title=&width=1124.2666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>具体再到 URLInput 的目标继承类<code>IStreamBuilder</code>看一下，发现他第一个传参的形式其实不是单纯的参数传递，而是<code>**传名参数**</code>，具体也可以算是一种惰性机制，他不会在函数被调用时立即执行作为传参数传入，而是在该函数的代码块执行逻辑时调用到了它，才会进行它的逻辑<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720112472862-c337acb9-92d2-42d9-ab49-b4d2ffd693ea.png#averageHue=%232c2d2d&clientId=u2d8e4ee3-0855-4&from=paste&height=151&id=uc80891f6&originHeight=283&originWidth=1868&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=238930&status=done&style=none&taskId=u1a1adf7e-2e34-4259-84f7-852aaa48fe2&title=&width=996.2666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>那我们可以修改一下测试代码也给 b 里面设置一段传名参数</p>\n<div class=\"language-scala\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">scala</span><pre class=\"shiki min-dark\" style=\"background-color: #1f1f1f\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> a()&#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  </span><span style=\"color: #F97583\">def</span><span style=\"color: #B392F0\"> msg()</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\"> String </span><span style=\"color: #F97583\">=</span><span style=\"color: #B392F0\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">    </span><span style=\"color: #F97583\">return</span><span style=\"color: #B392F0\"> </span><span style=\"color: #FFAB70\">&quot;i am class a&quot;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">  &#125;</span></span>\n<span class=\"line\"><span style=\"color: #B392F0\">&#125;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> b (name: </span><span style=\"color: #F97583\">=&gt;</span><span style=\"color: #B392F0\">String)</span><span style=\"color: #6B737C\">//这里注意冒号和等号之间的空格</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">class</span><span style=\"color: #B392F0\"> c(url</span><span style=\"color: #F97583\">:</span><span style=\"color: #B392F0\">a) </span><span style=\"color: #F97583\">extends</span><span style=\"color: #B392F0\"> b(url.msg())</span></span></code></pre></div><p>这次验证了猜想<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720112706423-ec09c0da-0a92-4d40-a431-b7a57b3b81e7.png#averageHue=%232b2e30&clientId=u2d8e4ee3-0855-4&from=paste&height=636&id=u280191cd&originHeight=1193&originWidth=2108&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=2597463&status=done&style=none&taskId=u457ec2f3-44c0-4eaf-bef4-3cb67a55057&title=&width=1124.2666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>看一下该字节码的具体内容<code>javap -verbose -p 21.class</code>这里我把它字节码文件名改成了 21.class，windowsshell 中的$有转义。不影响具体内容：<br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720116606719-662756d7-12f6-4f14-919b-1bf34f77ecb5.png#averageHue=%23323439&clientId=u43ab58bb-5ab5-4&from=paste&height=636&id=u22ae0fe1&originHeight=1193&originWidth=2108&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=2675682&status=done&style=none&taskId=u05ab772a-02e1-46ac-98d6-7bb0534e859&title=&width=1124.2666666666667\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>发现它对 a 中定义的 msg 方法进行调用，结合传名参数的惰性机制，我们最开始并没有触发 b 中传名参数的逻辑执行，也并没有产生相应的<code>$$anonfun$$lessinit$greater$</code>类名的字节码文件。而当我们执行了传名参数的逻辑之后，才生成的<code>$$anonfun$$lessinit$greater$</code>类名的字节码文件。<br>也就是说：<br><code>scala.sys.process.ProcessBuilderImpl$URLInput$$anonfun$$lessinit$greater$1</code><strong>类的生成，是由</strong><code>url.openStream()</code><strong>的执行而触发的</strong><br>了解了这个部分，我们就能够知道为什么会找到<code>scala.sys.process.ProcessBuilderImpl$URLInput$$anonfun$$lessinit$greater$1</code>这个类了，接下来进行总结梳理</p>\n<h1 id=\"利用总结\"><a href=\"#利用总结\" class=\"headerlink\" title=\"利用总结\"></a>利用总结</h1><p>首先，匿名函数本身在经过 scalac 编译器编译之后的字节码，其实是一段类的字节码，类似于<code>$URLInput$$anonfun$$lessinit$greater$1</code>这种，所以我们可以通过寻找这种类，并通过 LazyList 的构造器将其传入。那么当触发 readObject 方法，直到触发该匿名函数时，在 JVM 中实际上就是在调用该类，并且实例化。观察该类的字节码，在该类的 apply 方法中，会调用其子类构造方法中的参数的方法，到达利用的目的，比如 URLInput 链就会调用到 <code>url.openStream()</code><br><img src=\"https://cdn.nlark.com/yuque/0/2024/png/36078896/1720116523573-c26422ef-4821-42d1-9ee7-06a31e0a05d4.png#averageHue=%232d2f2f&clientId=u43ab58bb-5ab5-4&from=paste&height=73&id=ue760d5cc&originHeight=136&originWidth=1920&originalType=binary&ratio=1.875&rotation=0&showTitle=false&size=120325&status=done&style=none&taskId=uc9cebf30-671b-412a-a243-8d376f63c6b&title=&width=1024\" referrerpolicy=\"no-referrer\" alt=\"image.png\"><br>其他 scala 反序列化链也是如此</p>\n","feature":true,"text":"复现 CVE 的时候遇到了，趁此机会学一下原 CVE 的 issuehttps://github.com/scala/scala/pull/10118环境链接：...","permalink":"/post/Scala反序列化","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"锻刀-Scala反序列化","slug":"锻刀-Scala反序列化","count":1,"path":"api/categories/锻刀-Scala反序列化.json"}],"tags":[{"name":"锻刀","slug":"锻刀","count":15,"path":"api/tags/锻刀.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">前置知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#scala-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">scala 简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#scala-%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">scala 新特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E5%99%A8-match\"><span class=\"toc-text\">匹配器 match</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%B4%E7%94%9F%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">伴生对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#apply-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">apply 方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#trait\"><span class=\"toc-text\">trait</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">匿名函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%83%B0%E6%80%A7%E5%88%97%E8%A1%A8-LazyList\"><span class=\"toc-text\">惰性列表 LazyList*</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#LazyList-%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">LazyList 的反序列化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">工作流程分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E7%82%B9%E5%88%86%E6%9E%90\"><span class=\"toc-text\">漏洞点分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E5%88%A9%E7%94%A8%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%AF%BB%E6%89%BE\"><span class=\"toc-text\">可利用匿名函数寻找</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">利用总结</span></a></li></ol>","author":{"name":"stoocea","slug":"blog-author","avatar":"https://bu.dusays.com/2024/07/29/66a7ad417ef9e.png","link":"/","description":"time thick away","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Ysoserial-JRMPListener/JRMPClient学习","uid":"bca2d9535e8d62874b69184ae85883c1","slug":"JRMPListener Client学习","date":"2024-07-06T07:41:00.000Z","updated":"2024-07-06T07:47:13.274Z","comments":true,"path":"api/articles/JRMPListener Client学习.json","keywords":null,"cover":"https://bu.dusays.com/2024/07/06/6688f66750892.png","text":"RMI 过程回顾回顾一下 RMI 的流程，算是复习。我们就拿一段示例代码来举例子 javaimport java.rmi.Naming; import java...","permalink":"/post/JRMPListener Client学习","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[{"name":"锻刀理论包括一点挥刀练习java-JRMPListener/Client","slug":"锻刀理论包括一点挥刀练习java-JRMPListener-Client","count":1,"path":"api/categories/锻刀理论包括一点挥刀练习java-JRMPListener-Client.json"}],"tags":[{"name":"锻刀","slug":"锻刀","count":15,"path":"api/tags/锻刀.json"}],"author":{"name":"stoocea","slug":"blog-author","avatar":"https://bu.dusays.com/2024/07/29/66a7ad417ef9e.png","link":"/","description":"time thick away","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Java字节码初步学习","uid":"d401c16d5adfa98368631db68a02ca33","slug":"Java字节码初步学习","date":"2024-06-10T05:00:00.000Z","updated":"2024-06-28T15:09:11.735Z","comments":true,"path":"api/articles/Java字节码初步学习.json","keywords":null,"cover":"https://bu.dusays.com/2024/03/11/65ee760bd1078.jpg","text":"背景引入我们平常所写的 Java 是不能被 JVM 识别所运行的，必须将其编译成 class 文件，JVM 才能够识别代码，进行对应的程序操作。Java 有着”...","permalink":"/post/Java字节码初步学习","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"锻刀的理论学习-java字节码","slug":"锻刀的理论学习-java字节码","count":1,"path":"api/categories/锻刀的理论学习-java字节码.json"}],"tags":[{"name":"锻刀","slug":"锻刀","count":15,"path":"api/tags/锻刀.json"}],"author":{"name":"stoocea","slug":"blog-author","avatar":"https://bu.dusays.com/2024/07/29/66a7ad417ef9e.png","link":"/","description":"time thick away","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}